<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式（Group Of Four 23）【待补充】</title>
      <link href="/2021/10/12/java-she-ji-mo-shi/"/>
      <url>/2021/10/12/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式（Group-Of-Four-23）【待补充】"><a href="#设计模式（Group-Of-Four-23）【待补充】" class="headerlink" title="设计模式（Group Of Four 23）【待补充】"></a>设计模式（Group Of Four 23）【待补充】</h1><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ul><li><p>创建者模式</p><p>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p></li><li><p>结构型模式</p><p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p></li><li><p>行为型模式</p><p>模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p></li></ul><h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><h3 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 - Singleton"></a>单例模式 - Singleton</h3><ol><li><p>作用：保证一个类只有一个实例对象，并且提供一个访问该实例的全局访问点（方法）</p></li><li><p>应用场景：Spring中的每个bean；数据库连接池的设计；windows任务管理器；Windows回收站</p></li><li><p>优点：</p><ul><li><p>只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，则在应用启动时产生一个单例对象，然后永久存在内存中</p></li><li><p>在系统设置全局访问点，优化环共享资源访问</p></li></ul></li><li><p>常见的实现方式</p><ul><li><p>饿汉式（线程安全、调用效率高。但是，不能延时加载）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*    饿汉式单例实现：    1. 私有化构造器    2. 提供一个私有的static变量，存放唯一对象    3. 提供开放的方法访问对象* *&#x2F;public class SingletonDemo1 &#123;    &#x2F;&#x2F; 类初始化时。立即加载这个对象。存在问题：如果不调用getInstance()则会造成资源浪费    private static &#x2F;*final*&#x2F; SingletonDemo1 instance &#x3D; new SingletonDemo1();    private SingletonDemo1()&#123;    &#125;    &#x2F;&#x2F; static变量在类加载时初始化,不会发生并发访问的问题    public static &#x2F;*synchronized*&#x2F; SingletonDemo1 getInstance()&#123;        return instance;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>懒汉式（线程安全、调用效率不高。但是，能延时加载）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*    懒汉式单例实现：    1. 提供一个私有的不初始化static变量，    2. 私有化构造器    3. 调用getInstance时new一个对象* *&#x2F;public class SingletonDemo2 &#123;    &#x2F;&#x2F; 延迟加载    private static SingletonDemo2 instance;    private SingletonDemo2()&#123;    &#125;    &#x2F;&#x2F;每次调用getInstance()都要同步，并发效率低    public static synchronized SingletonDemo2 getInstance()&#123;        if(instance &#x3D;&#x3D; null)&#123;            instance &#x3D; new SingletonDemo2();        &#125;        return instance;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双重检测锁式（JVM底层内部的原因，不建议使用）</p></li><li><p>静态内部类式（线程安全、调用效率高。能延时加载）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*    静态内部类单例实现：    1. 私有化构造器    2. 创建静态内部类，在其中提供一个私有的static变量，存放唯一对象    3. 提供开放的方法访问对象* *&#x2F;public class SingletonDemo3 &#123;    &#x2F;&#x2F; 外部类没有static属性，则不会立即加载对象，也不会加载静态内部类    private static class SingletonClassInstance&#123;        &#x2F;&#x2F; 调用时加载静态内部类，加载类时天然线程安全。instance是static final修饰，保证内存中只有一个实例存在并且不能被修改        private static final SingletonDemo3 instance &#x3D; new SingletonDemo3();    &#125;    private SingletonDemo3()&#123;    &#125;    public static SingletonDemo3 getInstance()&#123;        return SingletonClassInstance.instance;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举单例（线程安全、调用效率高。但是，不能延时加载。避免通过反射和序列化产生的漏洞）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;*    枚举式单例实现：    1. 定义一个枚举的元素* *&#x2F;public enum SingletonDemo4 &#123;    &#x2F;&#x2F; 枚举类即单例模式。定义一个枚举的元素，代表一个实例    INSTANCE;    public void singletonOperation()&#123;        &#x2F;&#x2F; 对实例的操作    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>选用</p><p>单例对象 占用资源少，不需要延时加载：枚举式好于饿汉式</p><p>单例对象 占用资源大，需要延时加载：静态内部类式好于懒汉式</p></li><li><p>反射反序列化测试单例漏洞（枚举类型除外）</p><ul><li><p>反射</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">Class&lt;SingletonDemo1&gt; clazz &#x3D; (Class&lt;SingletonDemo1&gt;) Class.forName(&quot;SingletonDemo.ehan.SingletonDemo1&quot;);Constructor&lt;SingletonDemo1&gt; c &#x3D; clazz.getDeclaredConstructor(null);c.setAccessible(true);SingletonDemo1 a &#x3D;c.newInstance();SingletonDemo1 b &#x3D;c.newInstance();System.out.println(a &#x3D;&#x3D; b); &#x2F;&#x2F; false,两个不同的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  解决：私有化构造器加入异常判断</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">private SingletonDemo1()&#123;    if(instance !&#x3D; null)&#123;        throw new RuntimeException();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; SingletonDemo1需要实现SerializableSingletonDemo1 a &#x3D; SingletonDemo1.getInstance();&#x2F;&#x2F; 序列化FileOutputStream fos &#x3D; new FileOutputStream(&quot;d:&#x2F;a.txt&quot;);ObjectOutputStream oos &#x3D; new ObjectOutputStream(fos);oos.writeObject(a);oos.close();fos.close();&#x2F;&#x2F; 反序列化ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(&quot;d:&#x2F;a.txt&quot;));SingletonDemo1 b &#x3D; (SingletonDemo1)ois.readObject();System.out.println(a &#x3D;&#x3D; b); &#x2F;&#x2F; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决：添加readResolve方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 反序列化时，返回单例对象private Object readResolve() throws ObjectStreamException&#123;return instance;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式 - Factory"></a>工厂模式 - Factory</h3><ol><li><p>作用：实现了创建者和调用者的分离</p></li><li><p>面向对象设计的基本原则：</p><ul><li>OCP开闭原则（open-closed principle）：一个软件的实体应该对扩展开放，对修改关闭</li><li>DIP依赖倒转原则（dependence inversionprinciple）：针对接口编程，不要针对实现编程</li><li>LOD迪米特原则（Law of Demeter）：只与你直接的朋友通信，而避免与陌生人通信</li></ul></li><li><p>应用场景：Calender的getInstance方法；JDBC中connection对象的获取</p></li><li><p>实现方式</p><ul><li><p>简单工厂模式（静态工厂模式）</p><p>描述：工厂类一般使用静态方法，通过接收的参数不同来返回不同的对象实例</p><p>问题：对于增加新产品，不修改代码的话无法扩展（不满足OCP）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestObjectSimpleFactory &#123;    public static TestObject createTestObject(String type)&#123;        if(type.equals(&quot;one&quot;))&#123;            return new ChildObjectOne();        &#125; else if(type.equals(&quot;two&quot;)) &#123;            return new ChildObjectTwo();        &#125;        return null;    &#125;&#125;public class client &#123;    public static void main(String[] args) &#123;        TestObject a &#x3D; TestObjectSimpleFactory.createTestObject(&quot;one&quot;);        TestObject b &#x3D; TestObjectSimpleFactory.createTestObject(&quot;two&quot;);        a.run();        b.run();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂方法模式</p><p>描述：简单工厂模式只有一个工厂类，工厂方法模式有一组实现了相同接口的工厂类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface TestObjectMethodFactory &#123;    TestObject createTestObject();&#125;public class ChildObjectOneFactory implements TestObjectMethodFactory &#123;    @Override    public TestObject createTestObject  () &#123;        return new ChildObjectOne();    &#125;&#125;public class ChildObjectTwoFactory implements TestObjectMethodFactory &#123;    @Override    public TestObject createTestObject  () &#123;        return new ChildObjectTwo();    &#125;&#125;public static void main(String[] args) &#123;    TestObject a &#x3D; new ChildObjectOneFactory().createTestObject();    TestObject b &#x3D; new ChildObjectTwoFactory().createTestObject();    a.run();    b.run();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象工厂模式</p><p>描述：用来生产不同产品族的全部产品。是工厂方法模式的升级版本。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p>问题：对于增加新的产品，无能为力。支持增加产品族</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface TestObjectOne &#123;    public void runOne();    public void runTwo();&#125;public class TestObjectOneHigher implements TestObjectOne &#123;    @Override    public void runOne() &#123;        System.out.println(&quot;TestObjectOneHigher runOne&quot;);    &#125;    @Override    public void runTwo() &#123;        System.out.println(&quot;TestObjectOneHigher runTwo&quot;);    &#125;&#125;public class TestObjectOneLower implements TestObjectOne &#123;    @Override    public void runOne() &#123;        System.out.println(&quot;TestObjectOneLower runOne&quot;);    &#125;    @Override    public void runTwo() &#123;        System.out.println(&quot;TestObjectOneLower runTwo&quot;);    &#125;&#125;public interface TestObjectTwo &#123;    public void runOne();    public void runTwo();&#125;public class TestObjectTwoHigher implements TestObjectTwo &#123;    @Override    public void runOne() &#123;        System.out.println(&quot;TestObjectTwoHigher runOne&quot;);    &#125;    @Override    public void runTwo() &#123;        System.out.println(&quot;TestObjectTwoHigher runTwo&quot;);    &#125;&#125;public class TestObjectTwoLower implements TestObjectTwo &#123;    @Override    public void runOne() &#123;        System.out.println(&quot;TestObjectTwo runOne&quot;);    &#125;    @Override    public void runTwo() &#123;        System.out.println(&quot;TestObjectTwo runTwo&quot;);    &#125;&#125;public interface TestAbstractFactory &#123;    TestObjectOne createTestObjectOne();    TestObjectTwo createTestObjectTwo();&#125;public class TestHigherFactory implements TestAbstractFactory &#123;    @Override    public TestObjectOne createTestObjectOne() &#123;        return new TestObjectOneHigher();    &#125;    @Override    public TestObjectTwo createTestObjectTwo() &#123;        return new TestObjectTwoHigher();    &#125;&#125;public class TestLowerFactory implements TestAbstractFactory&#123;    @Override    public TestObjectOne createTestObjectOne() &#123;        return new TestObjectOneLower();    &#125;    @Override    public TestObjectTwo createTestObjectTwo() &#123;        return new TestObjectTwoLower();    &#125;&#125;public class client &#123;    public static void main(String[] args) &#123;        TestAbstractFactory lowerFactory &#x3D; new TestLowerFactory();        TestAbstractFactory higherFactory &#x3D; new TestHigherFactory();        TestObjectOne a &#x3D; lowerFactory.createTestObjectOne();        TestObjectOne b &#x3D; higherFactory.createTestObjectOne();        a.runOne();        a.runTwo();        b.runOne();        b.runTwo();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>比较：</p><p>简单工厂模式：结构复杂度更低</p><p>工厂方法模式：代码复杂度更低</p><p>设计理论工厂方法模式更优，但一般选择简单工厂模式</p></li></ol><h3 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式 - Builder"></a>建造者模式 - Builder</h3><ol><li><p>作用：实现了构建（Builder）和装配（Director）的解耦，从而构造出复杂的对象。实现了构建算法、装配算法的解耦，实现更好的复用。</p></li><li><p>应用场景：StringBuilder的append方法；SQL的preparedStatement；</p></li><li><p>实现：</p><pre class="line-numbers language-none"><code class="language-none">public class TestObject &#123;    private ComponentA componentA;    private ComponentB componentB;&#125;public class ComponentA &#123;    public ComponentA(String a)&#123;        this.a &#x3D; a;    &#125;    private String a;&#125;public class ComponentB &#123;    public ComponentB(String b)&#123;        this.b &#x3D; b;    &#125;    private String b;&#125;public interface TestObjectBuilder &#123;    ComponentA builderComponentA();    ComponentB builderComponentB();&#125;public class TestObjectBuilderImpl implements TestObjectBuilder&#123;    @Override    public ComponentA builderComponentA() &#123;        System.out.println(&quot;构建组件A&quot;);        return new ComponentA(&quot;组件A&quot;);    &#125;    @Override    public ComponentB builderComponentB() &#123;        System.out.println(&quot;构建组件B&quot;);        return new ComponentB(&quot;组件B&quot;);    &#125;&#125;public interface TestObjectDirector &#123;    TestObject directorTestObject();&#125;public class TestObjectDirectorImpl implements TestObjectDirector&#123;    private TestObjectBuilder builder;    public TestObjectDirectorImpl(TestObjectBuilder builder)&#123;        this.builder &#x3D; builder;    &#125;    @Override    public TestObject directorTestObject() &#123;        ComponentA a &#x3D; builder.builderComponentA();        ComponentB b &#x3D; builder.builderComponentB();        TestObject t &#x3D; new TestObject();        t.setComponentA(a);        t.setComponentB(b);        return t;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 - Prototype"></a>原型模式 - Prototype</h3><ol><li><p>作用：以某个对象为原型，复制出新的对象。新的对象具备原型对象的特点。解决产生一个对象需要繁琐的数据准备和访问权限的问题。一般和工厂方法模式一起使用</p></li><li><p>应用场景：Cloneable接口和clone方法</p></li><li><p>优点：效率高，避免了重新执行构造过程的步骤</p></li><li><p>实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ShallowCloneObject implements Cloneable,Serializable&#123;    private String name;    private Date createTime;    public ShallowCloneObject(String name, Date createTime)&#123;        this.name &#x3D; name;        this.createTime &#x3D; createTime;    &#125;    @Override    protected Object clone() throws CloneNotSupportedException &#123;        return super.clone();    &#125;&#125;public class DeepCloneObject implements Cloneable&#123;    private String name;    private Date createTime;    public DeepCloneObject(String name, Date createTime)&#123;        this.name &#x3D; name;        this.createTime &#x3D; createTime;    &#125;    @Override    protected Object clone() throws CloneNotSupportedException &#123;        Object object &#x3D; super.clone();        DeepCloneObject deepCloneObject &#x3D; (DeepCloneObject) object;        deepCloneObject.createTime &#x3D; ((Date) this.createTime.clone());        return object;    &#125;&#125;public static void main(String[] args) throws CloneNotSupportedException &#123;    &#x2F;&#x2F; 浅克隆，克隆对象的时间字段与原型对象指向同一个date，修改后互相影响    System.out.println(&quot;浅克隆--------------------------&quot;);    Date date1 &#x3D; new Date();    ShallowCloneObject s &#x3D; new ShallowCloneObject(&quot;原型对象&quot;,date1);    System.out.println(s.getName() + s.getCreateTime());    ShallowCloneObject shallowCloneObject &#x3D; (ShallowCloneObject)s.clone();    System.out.println(shallowCloneObject.getName() + shallowCloneObject.getCreateTime());    shallowCloneObject.setName(&quot;克隆对象&quot;);    date1.setTime(1000000000000L);    System.out.println(s.getName() + s.getCreateTime());    System.out.println(shallowCloneObject.getName() + shallowCloneObject.getCreateTime());    &#x2F;&#x2F; 深复制    System.out.println(&quot;深复制--------------------------&quot;);    Date date2 &#x3D; new Date();    DeepCloneObject d &#x3D; new DeepCloneObject(&quot;原型对象&quot;,date2);    System.out.println(d.getName() + d.getCreateTime());    DeepCloneObject deepCloneObject &#x3D; (DeepCloneObject)d.clone();    System.out.println(deepCloneObject.getName() + deepCloneObject.getCreateTime());    deepCloneObject.setName(&quot;克隆对象&quot;);    date2.setTime(1000000000000L);    System.out.println(d.getName() + d.getCreateTime());    System.out.println(deepCloneObject.getName() + deepCloneObject.getCreateTime());&#125;public static void main(String[] args) throws IOException, ClassNotFoundException &#123;    &#x2F;&#x2F; 使用序列化和反序列化    Date date &#x3D; new Date();    ShallowCloneObject s &#x3D; new ShallowCloneObject(&quot;原型对象&quot;,date);    ByteArrayOutputStream bos &#x3D; new ByteArrayOutputStream();    ObjectOutputStream oos &#x3D; new ObjectOutputStream(bos);    oos.writeObject(s);    byte[] bytes &#x3D; bos.toByteArray();    ByteArrayInputStream bis &#x3D; new ByteArrayInputStream(bytes);    ObjectInputStream ois &#x3D; new ObjectInputStream(bis);    ShallowCloneObject deepCloneBySerialization &#x3D; (ShallowCloneObject)ois.readObject();    System.out.println(s.getName() + s.getCreateTime());    System.out.println(deepCloneBySerialization.getName() + deepCloneBySerialization.getCreateTime());    date.setTime(12121212121212L);    System.out.println(s.getName() + s.getCreateTime());    System.out.println(deepCloneBySerialization.getName() + deepCloneBySerialization.getCreateTime());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式-Adapter"></a>适配器模式-Adapter</h3><ol><li><p>描述：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的类可以一起工作</p></li><li><p>应用场景：旧系统升级改造；java.io.InputStreamReader(InputStream)；java.io.OutputStreamWriter(OutputStream);</p></li><li><p>角色：</p><ul><li>被适配的类 - Adaptee：持有既定方法，需要适配</li><li>适配器 - Adapter：使用Adaptee的方法满足Target需求</li><li>目标类 - Target：定义所需的方法</li></ul></li><li><p>实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** 被适配的类* *&#x2F;public class Adaptee &#123;    public void request()&#123;        System.out.println(&quot;被适配的类提供客户端需要的功能&quot;);    &#125;&#125;&#x2F;** 适配器(类适配器方式)* *&#x2F;public class Adapter extends Adaptee implements Target&#123;    @Override    public void handleRequest() &#123;        super.request();    &#125;&#125;&#x2F;* * 适配器(对象适配器方式) * *&#x2F;public class Adapter2 implements Target&#123;    private Adaptee adaptee;    public Adapter2(Adaptee a)&#123;        super();        this.adaptee &#x3D; a;    &#125;    @Override    public void handleRequest() &#123;        adaptee.request();    &#125;&#125;public interface Target &#123;    void handleRequest();&#125;public class Client &#123;    public void test(Target t)&#123;        t.handleRequest();    &#125;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 1. 类适配器        Client c1 &#x3D; new Client();        Target t1 &#x3D; new Adapter();        c1.test(t1);        &#x2F;&#x2F; 2. 对象组合适配器        Client c2 &#x3D; new Client();        Adaptee a &#x3D; new Adaptee();        Target t2 &#x3D; new Adapter2(a);        c2.test(t2);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式 - Proxy"></a>代理模式 - Proxy</h3><ol><li><p>描述：通过代理控制对对象的访问，在调用某个对象方法前做前置处理，调用过后做后置处理。将统一的流程控制放在代理类中处理</p></li><li><p>应用场景：数据库连接池关闭处理；mybatis实现拦截器插件</p><ul><li>安全代理：屏蔽对真实角色的直接访问</li><li>远程代理：通过代理类处理远程方法调用（RMI）</li><li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li></ul></li><li><p>角色：</p><ul><li>抽象的角色 - Subject：定义了使Proxy和RealSubject具有一致性的接口</li><li>代理人 - Proxy：实现了Subject接口，尽量代替真实角色处理请求，处理不了再转给RealSubject</li><li>真实角色 - RealSubject：实现了Subject接口，必要时处理请求</li></ul></li><li><p>实现方式：</p><ul><li><p>静态代理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface AbstractRole &#123;    void step1();    void step2();    void step3();&#125;public class RealRole implements AbstractRole&#123;    @Override    public void step1() &#123;        System.out.println(&quot;真实角色-步骤1&quot;);    &#125;    @Override    public void step2() &#123;        System.out.println(&quot;真实角色-步骤2&quot;);    &#125;    @Override    public void step3() &#123;        System.out.println(&quot;真实角色-步骤3,代理角色没有的方法&quot;);    &#125;&#125;public class ProxyRole implements AbstractRole&#123;    AbstractRole abstractRole;    public ProxyRole(AbstractRole abstractRole)&#123;        super();        this.abstractRole &#x3D; abstractRole;    &#125;    @Override    public void step1() &#123;        System.out.println(&quot;代理角色-步骤1,代替真实角色执行&quot;);    &#125;    @Override    public void step2() &#123;        System.out.println(&quot;代理角色-步骤2,代替真实角色执行&quot;);    &#125;    @Override    public void step3() &#123;        abstractRole.step3();    &#125;&#125;public class Client &#123;    public static void main(String[] args) &#123;        AbstractRole realRole &#x3D; new RealRole();        AbstractRole proxyRole &#x3D; new ProxyRole(realRole);        proxyRole.step1();        proxyRole.step2();        proxyRole.step3();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>动态代理（JDK实现）</p><p>java.lang.reflect.Proxy：动态生成代理类和对象</p><p>java.lang.reflect.InvocationHandler：处理器接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface AbstractRole &#123;    void step1();    void step2();    void step3();&#125;public class RealRole implements AbstractRole &#123;    @Override    public void step1() &#123;        System.out.println(&quot;真实角色-步骤1&quot;);    &#125;    @Override    public void step2() &#123;        System.out.println(&quot;真实角色-步骤2&quot;);    &#125;    @Override    public void step3() &#123;        System.out.println(&quot;真实角色-步骤3,代理角色没有的方法&quot;);    &#125;&#125;public class AbstractRoleHandler implements InvocationHandler &#123;    AbstractRole abstractRole;    public AbstractRoleHandler(AbstractRole abstractRole)&#123;        this.abstractRole &#x3D; abstractRole;    &#125;    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;        System.out.println(&quot;invoke流程控制&quot;);        Object object &#x3D; null;        System.out.println(&quot;真实角色方法执行前&quot;);        if(method.getName().equals(&quot;step3&quot;))&#123;            object &#x3D; method.invoke(abstractRole,args);        &#125;        System.out.println(&quot;真实角色方法执行后&quot;);        return object;    &#125;&#125;public class Client &#123;    public static void main(String[] args) &#123;        AbstractRole realRole &#x3D; new RealRole();        AbstractRoleHandler handler &#x3D; new AbstractRoleHandler(realRole);        AbstractRole proxyRole&#x3D; (AbstractRole)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]&#123;AbstractRole.class&#125;,handler);        proxyRole.step3();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>比较：</p><p>动态代理的优点：抽象角色中声明的所有方法都被转移到调用处理器一个集中的方法中处理，可以更加灵活和统一地处理众多的方法</p></li></ol><h3 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式 - Bridge"></a>桥接模式 - Bridge</h3><ol><li><p>描述：处理多层继承结构，处理多个维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立地扩展</p></li><li><p>应用场景：JDBC驱动程序</p></li><li><p>角色：</p></li><li><p>实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Veidoo1 &#123;    void veidoo1Method();&#125;public class Veidoo2 &#123;    protected Veidoo1 veidoo1;    public Veidoo2(Veidoo1 veidoo1)&#123;        this.veidoo1 &#x3D; veidoo1;    &#125;    public void veidoo2Method()&#123;        veidoo1.veidoo1Method();    &#125;&#125;public class Veidoo1Classify1 implements Veidoo1&#123;    @Override    public void veidoo1Method() &#123;        System.out.println(&quot;#####################&quot;);        System.out.println(&quot;Veidoo1Classify1&quot;);    &#125;&#125;public class Veidoo1Classify2 implements Veidoo1&#123;    @Override    public void veidoo1Method() &#123;        System.out.println(&quot;#####################&quot;);        System.out.println(&quot;Veidoo1Classify2&quot;);    &#125;&#125;public class Veidoo2Classify1 extends Veidoo2&#123;    public Veidoo2Classify1(Veidoo1 veidoo1)&#123;        super(veidoo1);    &#125;    @Override    public void veidoo2Method()&#123;        super.veidoo2Method();        System.out.println(&quot;Veidoo2Classify1&quot;);    &#125;&#125;public class Veidoo2Classify2 extends Veidoo2&#123;    public Veidoo2Classify2(Veidoo1 veidoo1)&#123;        super(veidoo1);    &#125;    @Override    public void veidoo2Method()&#123;        super.veidoo2Method();        System.out.println(&quot;Veidoo2Classify2&quot;);    &#125;&#125;public class Client &#123;    public static void main(String[] args) &#123;        Veidoo2 o1 &#x3D; new Veidoo2Classify1(new Veidoo1Classify1());        Veidoo2 o2 &#x3D; new Veidoo2Classify2(new Veidoo1Classify1());        Veidoo2 o3 &#x3D; new Veidoo2Classify1(new Veidoo1Classify2());        Veidoo2 o4 &#x3D; new Veidoo2Classify2(new Veidoo1Classify2());        o1.veidoo2Method();        o2.veidoo2Method();        o3.veidoo2Method();        o4.veidoo2Method();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式 - Composite"></a>组合模式 - Composite</h3><ol><li><p>描述：把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象</p></li><li><p>角色：</p><ul><li>抽象构件角色 - Component：定义了叶子和容器构件的共同点</li><li>叶子构件角色 - Leaf：无子节点</li><li>容器构件角色 - Composite：有容器特征，可以包含子节点</li></ul></li><li><p>应用场景：操作系统的资源管理器；xml文件解析；oa组织树</p></li><li><p>实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Component &#123;    void operation();&#125;public class CompositeImpl implements Component&#123;    private String name;    private List&lt;Component&gt; list &#x3D; new ArrayList&lt;&gt;();    public CompositeImpl(String name) &#123;        this.name &#x3D; name;    &#125;    public void add(Component component)&#123;        list.add(component);    &#125;    public void remove(Component component)&#123;        list.remove(component);    &#125;    public Component getChild(int index)&#123;        return list.get(index);    &#125;    @Override    public void operation() &#123;        System.out.println(&quot;CompositeImpl&quot;+name);        for(Component c:list)&#123;            c.operation();        &#125;    &#125;&#125;public class LeafOneImpl implements Component&#123;    private String name;    public LeafOneImpl(String name) &#123;        this.name &#x3D; name;    &#125;    @Override    public void operation() &#123;        System.out.println(&quot;ComponentImpl &quot; + name);    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;&#125;public class LeafTwoImpl implements Component&#123;    private String name;    public LeafTwoImpl(String name) &#123;        this.name &#x3D; name;    &#125;    @Override    public void operation() &#123;        System.out.println(&quot;ComponentTwoImpl &quot; + name);    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;&#125;public class Client &#123;    public static void main(String[] args) &#123;        Component c1 &#x3D; new LeafOneImpl(&quot;叶子节点1&quot;);        Component c2 &#x3D; new LeafTwoImpl(&quot;叶子节点2&quot;);        CompositeImpl c3 &#x3D; new CompositeImpl(&quot;容器节点&quot;);        CompositeImpl c4 &#x3D; new CompositeImpl(&quot;子容器节点&quot;);        c3.add(c1);        c4.add(c2);        c2.operation();        c3.operation();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 - Decorator"></a>装饰模式 - Decorator</h3><ol><li><p>描述：动态地为一个对象增加新的功能，使用对象的关联关系代替继承关系，无需通过继承增加子类就能扩展对象的新功能。同时避免类型体系的快速膨胀。</p></li><li><p>角色：</p><ul><li>抽象构件角色 - Component：真实对象和装饰对象具有相同的接口</li><li>具体构件角色 - ConcreteComponent：真实对象</li><li>装饰角色 - Decorator：接受所有客户端的请求，并把请求转发给真实的对象。在调用真实对象前后增加新的功能</li><li>具体装饰角色 - ConcreteDecorator：负责给构件对象增加新功能</li></ul></li><li><p>应用场景：io流；</p></li><li><p>实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Component &#123;    void run();&#125;public class ConcreteComponent implements Component&#123;    @Override    public void run() &#123;        System.out.println(&quot;ConcreteComponent run&quot;);    &#125;&#125;public class Decorator implements Component&#123;    private Component component;    public Decorator(Component component)&#123;        this.component &#x3D; component;    &#125;    @Override    public void run() &#123;        System.out.println(&quot;Decorator run&quot;);        component.run();    &#125;&#125;public class ConcreteDecorator extends Decorator&#123;    public ConcreteDecorator(Component component) &#123;        super(component);        addMethod();    &#125;    public void addMethod()&#123;        System.out.println(&quot;ConcreteDecorator addMethod&quot;);    &#125;&#125;public class Client &#123;    public static void main(String[] args) &#123;        ConcreteComponent concreteComponent &#x3D; new ConcreteComponent();        concreteComponent.run();        &#x2F;&#x2F;增加新功能        ConcreteDecorator concreteDecorator &#x3D; new ConcreteDecorator(concreteComponent);        concreteDecorator.addMethod();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式 -"></a>外观模式 -</h3><ol><li>描述：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2021/08/23/maven/"/>
      <url>/2021/08/23/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>构件和依赖工具</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><img src="/2021/08/23/maven/image-1.png" class=""><h2 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>AliRepo-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Mirror Name for the Alirepo.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MAVEN使用"><a href="#MAVEN使用" class="headerlink" title="MAVEN使用"></a>MAVEN使用</h2><h3 id="1-定位maven"><a href="#1-定位maven" class="headerlink" title="1. 定位maven"></a>1. 定位maven</h3><ul><li>groupId：公司或组织项目的id，域名倒序</li><li>artifactId：一个模块id，maven工程的工程名</li><li>version：版本号，SHAPSHOT-迭代过程中的快照版本；RELEASE-正式版本</li></ul><h3 id="2-命令"><a href="#2-命令" class="headerlink" title="2. 命令"></a>2. 命令</h3><ul><li>创建项目 <code>mvn archetype:generate</code></li><li>删除target目录<code>mvn clean </code></li><li>编译 <code>mvn compile</code> (<code>mvn test-compile</code> 测试编译)</li><li>测试mvn test</li><li>打包mvn package</li><li>安装jar包到本地仓库 mvn install</li><li></li></ul><h3 id="3-pom-xml-项目对象模型"><a href="#3-pom-xml-项目对象模型" class="headerlink" title="3.pom.xml-项目对象模型"></a>3.pom.xml-项目对象模型</h3><p>​    project object model</p><ul><li>根标签project，对当前工程进行配置</li><li>modelVersion:代表pom.xml所采用的的标签结构</li><li>groupId</li><li>artifactId</li><li>version</li><li>packaging：打包方式<ul><li>默认jar包，即Java工程；</li><li>war包，即web工程；</li><li>pom：用来管理其他工程的工程</li></ul></li><li>properties：定义属性值</li><li>project.build.sourceEncoding：构建过程中读取源码时使用的字符集</li><li>dependencies：配置多个依赖信息</li><li>dependency：配置具体依赖信息</li><li>scope：当前依赖范围</li></ul><h3 id="4-目录结构"><a href="#4-目录结构" class="headerlink" title="4. 目录结构"></a>4. 目录结构</h3>   <img src="/2021/08/23/maven/image-2.png" class=""><h3 id="5-依赖范围"><a href="#5-依赖范围" class="headerlink" title="5. 依赖范围"></a>5. 依赖范围</h3><p>可选值</p><ul><li><p>compile（默认）</p><p>通常使用的第三方框架的jar包，这样在实际运行时主体功能中真正用到的jar包。可以部署到服务器。</p></li><li><p>test</p><p>main目录下无效；部署到服务器无效。</p></li><li><p>provided</p><p>部署到服务器无效。</p></li><li><p>system</p></li><li><p>runtime</p></li><li><p>import</p></li></ul><h3 id="6-依赖传递"><a href="#6-依赖传递" class="headerlink" title="6. 依赖传递"></a>6. 依赖传递</h3><p>​    A依赖B，B依赖C，A是否可以使用C，取决于：</p><ul><li>如果B依赖C是compile就传递过去</li><li>如果B依赖C是test/provided就传递不过去</li></ul><h3 id="7-依赖排除"><a href="#7-依赖排除" class="headerlink" title="7. 依赖排除"></a>7. 依赖排除</h3><p>​    A依赖B，B依赖C，A可以使用C但需要排除掉的时候（解决jar包冲突）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-继承"><a href="#8-继承" class="headerlink" title="8. 继承"></a>8. 继承</h3><p>   A工程继承B工程，则A的pom配置继承B的pom。</p><h3 id="9-聚合"><a href="#9-聚合" class="headerlink" title="9. 聚合"></a>9. 聚合</h3>   <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA项目分层</title>
      <link href="/2021/07/13/java-xiang-mu-fen-ceng/"/>
      <url>/2021/07/13/java-xiang-mu-fen-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="参考阿里规范，优秀的-Java-项目代码该如何分层？"><a href="#参考阿里规范，优秀的-Java-项目代码该如何分层？" class="headerlink" title="参考阿里规范，优秀的 Java 项目代码该如何分层？"></a>参考阿里规范，优秀的 Java 项目代码该如何分层？</h1><p>来源：<a href="https://www.cnblogs.com/bainannan/p/14418277.html">https://www.cnblogs.com/bainannan/p/14418277.html</a></p><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>说起应用分层，大部分人都会认为这个不是很简单嘛 就controller，service, mapper三层。看起来简单，很多人其实并没有把他们职责划分开，在很多代码中, controller做的逻辑比service还多, service往往当成透传了。<br>这其实是很多人开发代码都没有注意到的地方，反正功能也能用，至于放哪无所谓呗。这样往往造成后面代码无法复用，层级关系混乱，对后续代码的维护非常麻烦。<br>的确在这些人眼中分层只是一个形式，前辈们的代码这么写的，其他项目代码这么写的，那么我也这么跟着写。<br>但是在真正的团队开发中每个人的习惯都不同，写出来的代码必然带着自己的标签，有的人习惯controller写大量的业务逻辑，有的人习惯在service中之间调用远程服务，这样就导致了每个人的开发代码风格完全不同。<br>后续其他人修改的时候，一看，我靠这个人写的代码和我平常的习惯完全不同，修改的时候到底是按着自己以前的习惯改，还是跟着前辈们走，这又是个艰难的选择，选择一旦有偏差，你的后辈又维护你的代码的时候，恐怕就要骂人了。<br>所以一个好的应用分层需要具备以下几点:</p><ul><li>方便后续代码进行维护扩展。</li><li>分层的效果需要让整个团队都接受</li><li>各个层职责边界清晰<h3 id="2-如何进行分层"><a href="#2-如何进行分层" class="headerlink" title="2.如何进行分层"></a>2.如何进行分层</h3><h5 id="2-1阿里规范"><a href="#2-1阿里规范" class="headerlink" title="2.1阿里规范"></a>2.1阿里规范</h5>在阿里的编码规范中约束的分层如下:<img src="/2021/07/13/java-xiang-mu-fen-ceng/1626175175_1.png" class="">开放接口层: 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量控制等。<br>终端显示层: 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。<br>Web 层: 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。<br>Service 层: 相对具体的业务逻辑服务层。<br>Manager 层: 通用业务处理层，它有如下特征:1. 对第三方平台封装的层，预处理返回结果及转化异常信息;2. 对Service层通用能力的下沉，如缓存方案、中间件通用处理;3. 与DAO层交互，对多个DAO的组合复用。<br>DAO 层: 数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。<br>阿里巴巴规约中的分层比较清晰简单明了，但是描述得还是过于简单了，以及service层和manager层有很多同学还是有点分不清楚之间的关系，就导致了很多项目中根本没有Manager层的存在。下面介绍一下具体业务中应该如何实现分层<h5 id="2-2优化分层"><a href="#2-2优化分层" class="headerlink" title="2.2优化分层"></a>2.2优化分层</h5>从我们的业务开发中总结了一个较为的理想模型,这里要先说明一下由于我们的rpc框架选用的是thrift可能会比其他的一些rpc框架例如dubbo会多出一层,作用和controller层类似<img src="/2021/07/13/java-xiang-mu-fen-ceng/1626175175_2.png" class=""></li></ul><p>1.最上层controller和TService是我们阿里分层规范里面的第一层: 轻业务逻辑，参数校验，异常兜底。通常这种接口可以轻易更换接口类型,所以业务逻辑必须要轻，甚至不做具体逻辑。<br>2.Service：业务层，复用性较低，这里推荐每一个controller方法都得对应一个service,不要把业务编排放在controller中去做，为什么呢？<br>如果我们把业务编排放在controller层去做的话，如果以后我们要接入thrift,我们这里又需要把业务编排在做一次，这样会导致我们每接入一个入口层这个代码都得重新复制一份如下图所示:</p><img src="/2021/07/13/java-xiang-mu-fen-ceng/1626175175_3.png" class=""><p>这样大量的重复工作必定会导致我们开发效率下降，所以我们需要把业务编排逻辑都得放进service中去做:</p><img src="/2021/07/13/java-xiang-mu-fen-ceng/1626175175_4.png" class=""><p>3.Mannager：可复用逻辑层。这里的Mannager可以是单个服务的，比如我们的cache,mq等等，当然也可以是复合的，当你需要调用多个Mannager的时候，这个可以合为一个Mannager，比如逻辑上的连表查询等。如果是httpMannager或rpcMannager需要在这一层做一些数据转换<br>4.DAO：数据库访问层。主要负责“操作数据库的某张表，映射到某个java对象”，dao应该只允许自己的Service访问，其他Service要访问我的数据必须通过对应的Service。</p><h3 id="3-分层领域模型的转换"><a href="#3-分层领域模型的转换" class="headerlink" title="3.分层领域模型的转换"></a>3.分层领域模型的转换</h3><p>在阿里巴巴编码规约中列举了下面几个领域模型规约:</p><ul><li>DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li><li>DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。</li><li>BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。</li><li>AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li><li>VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li><li>Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。</li></ul><p>每一个层基本都自己对应的领域模型，这样就导致了有些人过于追求每一层都是用自己的领域模型，这样就导致了一个对象可能会出现3次甚至4次转换在一次请求中，当返回的时候同样也会出现3-4次转换，这样有可能一次完整的请求-返回会出现很多次对象转换。如果在开发中真的按照这么来，恐怕就别写其他的了，一天就光写这个重复无用的逻辑算了吧。<br>所以我们得采取一个折中的方案:</p><ol><li>允许Service/Manager可以操作数据领域模型，对于这个层级来说，本来自己做的工作也是做的是业务逻辑处理和数据组装。</li><li>Controller/TService层的领域模型不允许传入DAO层，这样就不符合职责划分了。</li><li>同理，不允许DAO层的数据传入到Controller/TService.</li></ol><img src="/2021/07/13/java-xiang-mu-fen-ceng/1626175175_5.png" class=""><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>总的来说业务分层对于代码规范是比较重要，决定着以后的代码是否可复用，是否职责清晰，边界清晰。<br>当然这种分层其实见仁见智, 团队中的所有人的分层习惯也不同，所以很难权衡出一个标准的准则，总的来说只要满足职责逻辑清晰，后续维护容易，就是好的分层。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库知识点梳理</title>
      <link href="/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/"/>
      <url>/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库知识点梳理"><a href="#MySQL数据库知识点梳理" class="headerlink" title="MySQL数据库知识点梳理"></a>MySQL数据库知识点梳理</h1><h2 id="1-数据库基本命令"><a href="#1-数据库基本命令" class="headerlink" title="1. 数据库基本命令"></a>1. 数据库基本命令</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">MYSQL -UROOT -P123456 -- 连接数据库UPDATE MYSQL.USER SET AUTHENTICATION_STRING&#x3D;PASSWORD(&#39;123456&#39;) WHERE USER&#x3D;&#39;ROOT&#39; AND HOST&#x3D;&#39;LOCALHOST&#39;; -- 修改用户密码FLUSH PRIVILEGES; -- 刷新权限SHOW DATABASES; -- 查看所有数据库USE 数据库名; -- 切换数据库；SHOW TABLES; -- 查看数据库中所有表DESCRIBE 表名; -- 显示数据库中所有的表信息SHOW CREATE DATABASE &#96;库名&#96;; -- 查看创建数据库语句SHOW CREATE TABLE &#96;表名;&#96; -- 查看创建数据表语句DESC &#96;表名&#96;; -- 查看表结构EXIT; -- 退出连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2. 数据库操作"></a>2. 数据库操作</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE [IF NOT EXISTS] 数据库名; -- 创建数据库DROP DATABASE [IF EXISTS] 数据库名; -- 删除数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-数据库的列类型"><a href="#3-数据库的列类型" class="headerlink" title="3. 数据库的列类型"></a>3. 数据库的列类型</h2><ul><li><p>数值</p><ul><li>tinyint 1字节</li><li>smallint 2字节</li><li>mediumint 3字节</li><li><strong>int 常用标准整数 4字节</strong></li><li>bigint 8字节</li><li>float 浮点数 4字节</li><li>double 浮点数 8字节</li><li>decimal 字符串形式的浮点数 用于金融计算</li></ul></li><li><p>字符串</p><ul><li>char 固定大小0~255</li><li><strong>varchar 可变字符串 0~65535</strong></li><li>tinytext 微型文本 2^8-1</li><li><strong>text 大文本 2^16-1</strong></li></ul></li><li><p>时间日期</p><ul><li>date YYYY-MM-DD 日期格式</li><li>time HH:mm:ss 时间格式</li><li><strong>datetime  YYYY-MM-DD HH:mm:ss 常用时间格式</strong></li><li>timestamp 时间戳</li><li>year 年份表示</li></ul></li><li><p>null</p></li></ul><h2 id="4-数据库字段属性"><a href="#4-数据库字段属性" class="headerlink" title="4. 数据库字段属性"></a>4. 数据库字段属性</h2><ul><li><p>Unsigned：</p><ul><li>无符号整数</li><li>声明该列不能为负数</li></ul></li><li><p>zerofill： 不足的位数0填充</p></li><li><p>自增： 设计唯一主键，类型必须为整数，可以自定义起始值和步长</p></li><li><p>非空：</p><ul><li>not null 不赋值会报错</li><li>null 不赋值默认为null</li></ul></li><li><p>default</p></li></ul><h2 id="5-数据表操作"><a href="#5-数据表操作" class="headerlink" title="5. 数据表操作"></a>5. 数据表操作</h2><ol><li><p>创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE [IF NOT EXISTS] &#96;表名&#96;( &#96;字段名&#96; 列类型 [属性] [索引] [注释],)[表类型][字符集][注释];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ALTER TABLE 表名 RENAME AS 表名; -- 修改表名 ALTER TABLE 表名 ADD 字段名 列属性; -- 表增加字段ALTER TABLE 表名 MODIFY 字段名 列属性; -- 表修改约束ALTER TABLE 表名 CHANGE 字段名 字段名 列属性; -- 表字段重命名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除表字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ALTER TABLE 表名 DROP 字段名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除表</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP TABLE IF EXISTs 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="6-引擎"><a href="#6-引擎" class="headerlink" title="6. 引擎"></a>6. 引擎</h2><ul><li>INNODB（默认使用）：安全性高，事务处理。多表多用户操作<ul><li>支持事务</li><li>支持数据行锁定</li><li>支持外键约束</li><li>不支持全文索引</li><li>表空间大小：大</li></ul></li><li>MYISAM（较早版本使用）：节约空间，速度较快<ul><li>不支持事务</li><li>不支持数据行锁定</li><li>不支持外键约束</li><li>支持全文索引</li><li>表空间大小：小</li></ul></li></ul><h2 id="7-DML"><a href="#7-DML" class="headerlink" title="7. DML"></a>7. DML</h2><ul><li><p>插入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO 表名([字段1,字段2]) values (&#39;值1&#39;,&#39;值2&#39;),(&#39;值1&#39;,&#39;值2&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">UPDATE 表名 SET 字段1 &#x3D; 值1, 字段2 &#x3D; 值2, WHERE [条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DELETE FROM 表名 WHERE [条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">TRUNCATE 表名; -- 清空表数据，重置自增列，不影响事务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询    </p>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT [ALL|DISTINCT|DISTINCTROW|TOP]&#123;*|talbe.*|[table.]field1[AS alias1][,[table.]field2[AS alias2][,…]]&#125;FROM TABLE [AS 别名][LEFT | RIGHT | INNER join TABLE on …][WHERE…][GROUP BY…] -- 通过哪个字段分组[HAVING…] -- 过滤分组的记录必须满足的次要条件[ORDER BY 字段名 ASC|DESC][LIMIT 查询起始下标,数量];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT @@auto_increment_increment; -- 查询自增步长<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="8-七种JOIN"><a href="#8-七种JOIN" class="headerlink" title="8. 七种JOIN"></a>8. 七种JOIN</h2><img src="/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/qizhongjon.png" class=""><h2 id="9-MYSQL常用函数"><a href="#9-MYSQL常用函数" class="headerlink" title="9. MYSQL常用函数"></a>9. MYSQL常用函数</h2><ul><li>数学运算函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ABS(-8)  -- 8，绝对值CEILING(9.4) -- 10，向上取整FLOOR(9.4) -- 9，向下取整RAND() -- 返回0-1的随机数SIGN() -- 返回一个数的符号，正数1，负数-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>字符串函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHAR_LENGTH(&#39;字符串长度&#39;) -- 返回字符串长度CONCAT(&#39;拼接&#39;,&#39;多个&#39;,&#39;字符串&#39;) -- 拼接字符串INSERT(源字符串,位置,长度,插入字符串) -- 查找位置替换对应长度的字符串LOWER(字符串) -- 转小写UPPER(字符串) -- 转大写INSTR(字符串,子串) -- 返回第一次出现的子串的位置REPLACE(字符串,被替换,需替换) -- 替换指定字符串SUBSTR(字符串,截取起始位置,长度) -- 截取指定位置和长度的字符串REVERSE(字符串) -- 反转MD5(明文) -- MD5 加密<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>时间和日期函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CURRENT_DATE() -- 获取当前日期CURDATE() -- 获取当前日期NOW() -- 获取当前时间，时分秒LOCALTIME -- 获取本地时间，时分秒SYSDATE() -- 系统时间YEAR()MONTH()DAY()HOUR()MINUTE()SECOND()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>系统函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SYSTEM_USER()USER()VERSION() -- 获取版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>聚合函数</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">COUNT() -- 统计数量，count(字段)忽略null，count(*),count(1)不会忽略nullSUM() -- 求和AVG() -- 求平均MAX() -- 求最大MIN() -- 求最小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-事务"><a href="#10-事务" class="headerlink" title="10. 事务"></a>10. 事务</h2><p>将一组SQL放在一个批次中去执行</p><ol><li><p>事务原则：ACID原则</p><ul><li><p>原子性：一起成功或一起失败</p></li><li><p>一致性：操作前后数据完整性最终一致</p></li><li><p>隔离性：多个用户同时操作，排除其他事务对本次事务的影响</p></li><li><p>持久性：事务结束后的数据不随外界原因导致丢失，事务未提交恢复原状，事务提交后持久化到数据库，一旦提交就不可逆</p></li></ul></li><li><p>事务的隔离级别</p><ul><li>脏读：一个事务读取到另一个事务未提交的数据</li><li>不可重复度：在一个事务内读取表中的某一行数据，多次读取结果不同</li><li>虚读（幻读）：在一个事务内读取到了别的事务插入的数据，导致前后读取不一致（比如多了一条）</li></ul></li><li><p>手动处理事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SET autocommit &#x3D; 0; 关闭事务自动提交START TRANSACTION; -- 标记一个事务开始...COMMIT; -- 提交ROLLBACK; -- 回滚SET autocommit &#x3D; 1; 开启事务自动提交SAVEPOINT; -- 保存点ROLLBACK TO SAVEPOINT; -- 回滚到保存点RELEASE  SAVEPOINT; -- 撤销保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="11-索引"><a href="#11-索引" class="headerlink" title="11. 索引"></a>11. 索引</h2><p>索引（index）是帮助MYSQL高效获取数据的数据结构。</p><ol><li><p>索引的分类</p><ul><li>主键索引（PRIMARY KEY）唯一标识，不可重复，只能有一个列作为主键</li><li>唯一索引（UNIQUE KEY）避免重复的列出现，多个列都可以标识</li><li>常规索引（KEY/INDEX）默认的</li><li>全文索引（FULLTEXT）快速定位数据，在特定数据库引擎下才有</li></ul></li><li><p>索引的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW INDEX FROM 表名; -- 显示所有索引信息ALTER TABLE 表名 ADD 索引类型 index 索引名(字段名); -- 添加索引CREATE INDEX 索引名 on 表名(字段名); -- 添加索引SELECT * FROM 表名 use index(索引名) WHERE ...; -- 提示SQL使用索引SELECT * FROM 表名 ignore index(索引名) WHERE ...; -- 提示SQL忽略使用索引SELECT * FROM 表名 force index(索引名) WHERE ...; -- 提示SQL必须使用索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>索引原则</p><ul><li>索引不是越多越好</li><li>不要对进程变动数据加索引</li><li>小数据量表不需要加索引</li><li>索引一般加在常用来查询的字段上</li><li>覆盖索引：查询使用了索引，并且需要返回的列在该索引中全部能找到，减少select *</li></ul></li><li><p>索引失效情况</p><ul><li>最左前缀原则：如果索引了多列（联合索引），查询从最左列开始，并且不跳过索引中的列。如果跳过某一列，索引将部分失效（后面的字段索引失效）。</li><li>联合索引中，出现范围查询（大于小于），范围查询右侧的列索引失效。业务允许的情况下使用大于等于、小于等于。</li><li>不要在索引列上进行运算，索引将失效。</li><li>字符串类型不加单引号，索引失效。</li><li>头部模糊匹配（%_），索引失效。尾部模糊匹配，索引不失效。</li><li>or分隔的条件，如果or两侧的条件有一侧无索引，则涉及的索引都不会被用到。</li><li>如果MySQL评估使用索引比全表扫描更慢，则不使用索引。</li></ul></li></ol><h2 id="12-用户管理"><a href="#12-用户管理" class="headerlink" title="12. 用户管理"></a>12. 用户管理</h2><p>用户表：mysql.user</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE USER 用户名 IDENTIFIED BY 密码; -- 创建用户SET PASSWORD &#x3D; PASSWORD(密码); -- 修改当前用户密码SET PASSWORD FOR 用户名 &#x3D; PASSWORD(密码); -- 修改指定用户密码RENAME USER 用户名 TO 新用户名; -- 重命名GRANT ALL PRIVILEGES ON 库.表 TO 用户; -- 用户授权所有权限SHOW GRANTS FOR 用户; -- 查询权限SHOW GRANTS FOR root@localhost; -- 查询权限REVOKE ALL PRIVILEGES ON 库.表 FROM 用户; -- 撤销权限DROP USER 用户名; -- 删除用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行导出数据库：mysqldump -h主机名 -uroot -p密码 库名 表名1 表名2  &gt; 磁盘名/文件名</p><p>命令行导入数据库：source 磁盘名/文件名</p><h2 id="13-三大范式"><a href="#13-三大范式" class="headerlink" title="13. 三大范式"></a>13. 三大范式</h2><ul><li>第一范式（1NF）：数据库表的每一列都是不可分割的原子数据项</li><li>第二范式（2NF）：（满足第一范式）数据库表中的每一列都和主键相关，而不是只与主键的某一列相关</li><li>第三范式（3NF）：（满足第一范式和第二范式）数据库表的每一列都与主键直接相关，而不是间接相关</li></ul><h2 id="14-JDBC"><a href="#14-JDBC" class="headerlink" title="14. JDBC"></a>14. JDBC</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.jdbc.db;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import com.mysql.jdbc.Statement;public class DBUTIL &#123;privatestatic final String URL &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;database&quot;;private static final String USERNAME &#x3D; &quot;root&quot;;private static final String PASSWORD &#x3D; &quot;password&quot;;public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;&#x2F;&#x2F; JDBC 的三要素文件，加载驱动，获取连接，&#x2F;&#x2F;1. 加载驱动程序Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#x2F;&#x2F;2. 获取数据库的连接 Connection 数据库连接对象Connection connection &#x3D; DriverManager.getConnection(URL,USERNAME,PASSWORD);&#x2F;&#x2F;3. 通过数据库的连接操作数据库，实现增删改查，Statement SQL执行对象Statement statement &#x3D; connection.createStatement();&#x2F;&#x2F;4. 返回 ResultSet 对象，编写 sql 语句，实现最简单的增删改查ResultSet resultSet &#x3D; statement.executeQuery(&quot;select username,password from user&quot;);&#x2F;&#x2F;打印数据while(resultSet.next()) &#123;&#x2F;&#x2F;返回字符串System.out.println(rs.getString(&quot;username&quot;) + rs.getString(&quot;password&quot;));&#125;        &#x2F;&#x2F;5. 释放连接        resultSet.close();        statement.close();        connection.close();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.thb.study3;import com.thb.study2.Utils.JdbcUtils;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;public class Test03 &#123;    public static void main(String[] args) &#123;        Connection connection &#x3D; null;        PreparedStatement preparedStatement &#x3D; null;&#x2F;&#x2F; 预执行        try &#123;            connection &#x3D; JdbcUtils.getConnection();            connection.setAutoCommit(false);&#x2F;&#x2F; 关闭自动提交，开启事务            String sql &#x3D; &quot;update account set money&#x3D;money-100 where &#96;name&#96;&#x3D;&#39;A&#39;&quot;;            preparedStatement &#x3D; connection.prepareStatement(sql);            preparedStatement.executeUpdate();            String sql2 &#x3D; &quot;update account set money&#x3D;money+100 where &#96;name&#96;&#x3D;&#39;B&#39;&quot;;            preparedStatement &#x3D; connection.prepareStatement(sql2);            preparedStatement.executeUpdate();            connection.commit();            System.out.println(&quot;成功&quot;);        &#125; catch (SQLException e) &#123;            &#x2F;&#x2F;默认失败会回滚            connection.rollback();            e.printStackTrace();        &#125;finally &#123;            JdbcUtils.release(connection,preparedStatement,null);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-视图"><a href="#15-视图" class="headerlink" title="15. 视图"></a>15. 视图</h2><p>虚拟存在的表，数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。只保留sql的查询逻辑，不保存查询结果。</p><p>作用：1. 简化用户对数据的理解，也简化用户的操作。2. 设定视图用户的操作权限。3. 屏蔽真实表结构变化带来的影响</p><ul><li><p>创建</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CERATE VIEW 视图名 AS SELECT语句  [WITH[CASCADED | LOCAL] CHECK OPTION]; -- CASCADED 检查依赖的视图，LOCAL不检查依赖的视图<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW CREATE VIEW 视图名;SELECT * FROM 视图名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CERATE OR REPLACE VIEW 视图名 AS SELECT语句  [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方式一ALTER VIEW 视图名 AS SELECT语句 [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方式二<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP VIEW [IF EXISTS] 视图名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="16-存储过程"><a href="#16-存储过程" class="headerlink" title="16. 存储过程"></a>16. 存储过程</h2><p>数据库sql语言层面的代码封装和重用。</p><ul><li><p>创建</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DELIMITER $$ -- 定义结束符CREATE PROCEDURE 存储过程名称([IN|OUT|INOUT 参数名 参数类型])BEGIN -- SQL语句END$$DELIMITER ; -- 重置结束符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CALL 名称([参数])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT * FROM INFORMATION_SCHEMA_ROUTINES WHERE ROUTINE_SCHEMA &#x3D; &#39;xxx&#39;;  -- 查询指定数据库的存储过程及状态信息SHOW CREATE PROCEDURE 存储过程名称;  -- 查询存储过程的定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP PROCEDURE [IF EXISTS] 存储过程名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>变量</p><ul><li><p>系统变量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW [SESSION | GLOBAL] VARIABLES; -- 查看所有系统变量SELECT @@[SESSION | GLOBAL] 系统变量名; -- 查看指定变量的值SET [SESSION | GLOBAL] 系统变量名 &#x3D; 值; -- 设置系统变量SET @@[SESSION | GLOBAL] 系统变量名 &#x3D; 值; -- 设置系统变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义变量</p><p>作用域：当前连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SET @var_name  &#x3D; expr[,@var_name  &#x3D; expr]...; -- 赋值SET @var_name  :&#x3D; expr[,@var_name  :&#x3D; expr]...; -- 赋值SELECT @var_name  &#x3D; expr[,@var_name  &#x3D; expr]...; -- 赋值SELECT 字段名 INTO @var_name FROM 表名; -- 赋值SELECT @var_name; -- 使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部变量</p><p>作用域：BEGIN … END块;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DECLARE 变量名 变量类型[DEFAULT]; -- 声明SET 变量名 &#x3D; 值; -- 赋值SET 变量名 :&#x3D; 值; -- 赋值SELECT 字段名 INTO 变量名 FROM 表名; -- 赋值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 判断-- ifIF 条件1 THEN...ELSEIF 条件2 THENELSE...END IF;-- caseCASE case_valueWHEN ... THEN ...ELSEEND CASE;-- 循环-- whileWHILE 条件 DO... sqlEND WHILE;-- repeatREPEAT... sqlUNTIL 条件END REPEAT;-- loop[begin_label:]LOOP...sqlEND LOOP [end_label];-- 游标DECLARE 游标名称 CURSOR FOR 查询语句; -- 声明游标OPEN 游标名称; -- 打开游标FETCH 游标名称 INTO 变量[,变量]; -- 获取游标记录-- handlerDECLARE handler_action HANDLER FOR condition_value[,condition_value]... statement; -- handler_actionCONTINUE; -- 继续执行程序EXIT; -- 终止程序-- condition_valueSQLSTATE sqlstate_value; -- 状态码SQLWARNING; -- 所有以01开头的SQLSTATE代码的缩写NOT FOUND; -- 所有以02开头的SQLSTATE代码的缩写SQLEXCEPTION; -- 所有没被SQLWARNING和NOT FOUND捕获<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>存储函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE FUNCTION 存储函数名称([参数列表])RETURNS TYPE [DETERMINISTIC | NO SQL |READS SQL DATA]BEGIN -- SQL语句RETURN ...;END;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="17-触发器"><a href="#17-触发器" class="headerlink" title="17. 触发器"></a>17. 触发器</h2><p>触发器是指与表有关的数据库对象，指在insert/update/delete之前或者之后，触发并执行触发器中定义的SQL集合。OLD，NEW指发生变化的记录内容</p><ul><li><p>创建</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TRIGGER trigger_nameBEFORE|AFTER INSERT|UPDATE|DELETEON tb_name FOR EACH ROW -- 行级触发器BEGINtrigger_stmt;END;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW TRIGGERS;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP TRIGGER [schema_name] trigger_name; -- 如果没有指定schema_name，默认当前数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="18-锁"><a href="#18-锁" class="headerlink" title="18. 锁"></a>18. 锁</h2><p>计算机协调多个进程或线程并发访问某一资源的机制。</p><ul><li><p>全局锁</p><p>对整个数据库实例加锁，加锁后处于只读状态。后续写操作将被阻塞。</p><p>使用场景：做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据完整性</p><pre class="line-numbers language-none"><code class="language-none">fush tables with read lock; -- 加全局锁unlock tables; -- 释放锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>表级锁</p><p>每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><ul><li><p>表锁</p><p>加锁：lock tables 表名… read/write</p><p>释放锁：unlock tables / 客户端连接关闭</p><ul><li><p>表共享读锁（read lock）：阻塞写，不阻塞其他客户端的读</p></li><li><p>表独占写锁（write lock）：阻塞其他客户端的读写，不阻塞自己的读写</p></li></ul></li><li><p>元数据锁（meta data lock）</p><p>系统自动控制，无需显式使用。访问表时会自动加上，维护表元数据的数据一致性。在表上有未提交的事务时，不可以对元数据进行写入操作。避免了DML和DDL的冲突，保证读写的正确性。</p><p>增删改查时，加MDL读锁（共享），表结构变更时，加MDL写锁（排他）。</p></li><li><p>意向锁</p><p>使用场景：加表锁时需要检查每一行的行锁，为解决效率低的问题，使用意向锁减少检查。</p><ul><li><p>意向共享锁（IS）</p><p>与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。</p></li><li><p>意向排他锁（IX）</p><p>与表锁共享锁（read）及表锁排他锁（write）都互斥，意向锁之间不互斥</p></li></ul></li></ul></li><li><p>行级锁</p><p>每次操作锁住对应表。锁定粒度小，发生锁冲突的概率最低，并发度最高。</p><p>通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</p><ul><li><p>行锁（record lock）</p><p>锁定单个记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</p><ul><li><p>共享锁（S）：</p><p>允许一个事物去读一行，阻止其他事务获得相同数据集的排他锁。</p></li><li><p>排他锁（X）：</p><p>允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</p></li></ul></li><li><p>间隙锁（gap lock）</p><p>锁定索引记录间隙（不含记录），确保索引记录间隙不变，防止其他事务insert产生幻读。在RR隔离级别下支持</p></li><li><p>临键锁（next-key-lock）</p><p>行锁和间隙锁的组合。在RR隔离级别下支持</p></li></ul></li></ul><h2 id="19-SQL性能分析"><a href="#19-SQL性能分析" class="headerlink" title="19. SQL性能分析"></a>19. SQL性能分析</h2><ul><li><p>SQL执行频率</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW GLOBAL STATUS LIKE &#39;Com_______)&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启慢查询日志</p></li></ul><p>​        /etc/my.cnf配置 ，配置完重启mysql</p><p>​        slow_query_log = 1 # 设置开启MYSQL慢查询日志</p><p>​        long_query_time = 2 # 设置SQL执行时间</p><ul><li><p>profile耗时详情</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">show profiles;show profile [cpu] [for query query_id]; -- 耗时情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>expain</p><p>sql语句前加上explain/desc</p><ul><li><p>select _type</p><ul><li><p>SIMPLE 简单表，不使用表连接或者子查询</p></li><li><p>PRIMARY 主查询 外层的查询</p></li><li><p>UNION UNION中的第二个或者后面的查询语句</p></li><li><p>SUBQUERY SELECT / WHERE包含子查询</p></li></ul></li><li><p><strong>type</strong></p><p> ​    连接类型由好到差NULL（不访问表）、system（系统表）、const（主键或唯一索引）、eq_ref（唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配）、ref（非唯一性的索引）、range（使用索引返回一个范围中的行，如大于小于等情况）、index（用了索引但遍历索引树）、all（全表扫描）</p></li><li><p><strong>possible_key</strong> </p><p> 显示可能应用在这张表上的索引，一个或多个</p></li><li><p><strong>key</strong></p><p> 实际用到的索引，没有使用索引则为null</p></li><li><p><strong>key_len</strong></p><p> 索引中使用的字节数，索引字段最大可能长度（并非实际使用长度），长度越短越好</p></li><li><p>rows</p><p> mysql认为必须要执行查询的行数（不准确的估计值）</p></li><li><p>filtered</p><p> 表示返回结果行数占需读取行数的百分比，值越大越好</p></li><li><p>extra</p><ul><li>using index condition; 查找使用了索引，但是需要回表查询数据</li><li>using where;using index; 查找使用了索引，但是需要的数据都在索引列中能找到，不需要回表查询数据</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架 - SpringMVC</title>
      <link href="/2021/02/11/ssm-kuang-jia-springmvc/"/>
      <url>/2021/02/11/ssm-kuang-jia-springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>​    MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分，SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、 WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目 表述层开发的首选方案。</p><ul><li><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据 JavaBean分为两类：</p><ul><li><p> 一类称为实体类Bean：专门存储业务数据的，如 Student、User 等 </p></li><li><p>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。 </p></li></ul></li><li><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p></li><li><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器 MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器。</p></li></ul><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><pre><code>- Spring 家族原生产品，与 IOC 容器等基础设施无缝对接 - 基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理 - 表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案 - 代码清新简洁，大幅度提升开发效率 - 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可 - 性能卓著，尤其适合现代大型、超大型互联网项目要求</code></pre><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- SpringMVC --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- ServletAPI --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Spring5和Thymeleaf整合包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- contextConfigLocation为固定值 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的        src/main/resources --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    作为框架的核心组件，在启动过程中有大量的初始化操作要做    而这些操作放在第一次请求时才执行会严重影响访问速度    因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    设置springMVC的核心控制器所能处理的请求的请求路径    /所匹配的请求可以是/login或.html或.js或.css方式的请求路径    但是/不能匹配.jsp请求路径的请求    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 自动扫描包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mvc.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 配置Thymeleaf视图解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 视图前缀 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token comment">&lt;!-- 视图后缀 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--处理静态资源，例如html、js、css、jpg若只设置该标签，则只能访问静态资源，其他请求则无法访问此时必须设置&lt;mvc:annotation-driven/>解决问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 开启mvc注解驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 处理响应中文内容乱码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultCharset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-RequestMapping"><a href="#4-RequestMapping" class="headerlink" title="4. @RequestMapping"></a>4. @RequestMapping</h2><ol><li><p>作用：</p><p>就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p></li><li><p>位置：</p><ul><li><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息 </p></li><li><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p></li></ul></li><li><p>value属性：</p><ul><li><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射 </p></li><li><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p></li><li><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p></li></ul></li><li><p>method属性：</p><ul><li><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射 </p></li><li><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p></li></ul></li><li><p>params属性：</p><ul><li>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射 </li><li>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系 <ul><li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li><li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数 </li><li>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value </li><li>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</li></ul></li></ul></li><li><p>headers属性：</p><ul><li>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射 </li><li>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系<ul><li>“header”：要求请求映射所匹配的请求必须携带header请求头信息 </li><li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息 </li><li>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value </li><li>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</li></ul></li></ul></li><li><p>SpringMVC支持ant风格的路径：</p><ul><li><p>？：表示任意的单个字符 </p></li><li><p>*：表示任意的0个或多个字符 </p></li><li><p>**：表示任意层数的任意目录</p></li></ul></li><li><p>支持路径中的占位符</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。</p></li></ol><h2 id="5-SpringMVC获取请求参数"><a href="#5-SpringMVC获取请求参数" class="headerlink" title="5. SpringMVC获取请求参数"></a>5. SpringMVC获取请求参数</h2><ol><li><p>通过ServletAPI获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;testParam&quot;)public String testParam(HttpServletRequest request)&#123;    String username &#x3D; request.getParameter(&quot;username&quot;);    String password &#x3D; request.getParameter(&quot;password&quot;);    System.out.println(&quot;username:&quot;+username+&quot;,password:&quot;+password);    return &quot;success&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过控制器方法的形参获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;testParam&quot;)public String testParam(String username, String password)&#123;    System.out.println(&quot;username:&quot;+username+&quot;,password:&quot;+password);    return &quot;success&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@RequestParam</p><ul><li>@RequestParam是将请求参数和控制器方法的形参创建映射关系 </li><li>@RequestParam注解一共有三个属性： <ul><li>value：指定为形参赋值的请求参数的参数名 </li><li>required：设置是否必须传输此请求参数，默认值为true <ul><li>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；</li><li>若设置为 false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为 null </li></ul></li><li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</li></ul></li></ul></li><li><p>@RequestHeader</p><ul><li><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系 </p></li><li><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p></li></ul></li><li><p>@CookieValue</p><ul><li>@CookieValue是将cookie数据和控制器方法的形参创建映射关系 </li><li>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</li></ul></li><li><p>通过POJO获取</p><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实 体类中的属性名一致，那么请求参数就会为此属性赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;testpojo&quot;)public String testPOJO(User user)&#123;    System.out.println(user);    return &quot;success&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="6-RequestBody"><a href="#6-RequestBody" class="headerlink" title="6. @RequestBody"></a>6. @RequestBody</h2><ol><li><p>@RequestBody</p><p>可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;test&#x2F;RequestBody&quot;)public String testRequestBody(@RequestBody String requestBody)&#123;    System.out.println(&quot;requestBody:&quot;+requestBody);    return &quot;success&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@RequestBody获取json格式的请求参数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 导入jackson的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;将json格式的数据转换为map集合@RequestMapping(&quot;&#x2F;test&#x2F;RequestBody&#x2F;json&quot;)public void testRequestBody(@RequestBody Map&lt;String, Object&gt; map,HttpServletResponse response) throws IOException &#123;    System.out.println(map);    &#x2F;&#x2F;&#123;username&#x3D;admin, password&#x3D;123456&#125;    response.getWriter().print(&quot;hello,axios&quot;);&#125;&#x2F;&#x2F;将json格式的数据转换为实体类对象@RequestMapping(&quot;&#x2F;test&#x2F;RequestBody&#x2F;json&quot;)public void testRequestBody(@RequestBody User user, HttpServletResponseresponse) throws IOException &#123;    System.out.println(user);    &#x2F;&#x2F;User&#123;id&#x3D;null, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;123456&#39;, age&#x3D;null,    gender&#x3D;&#39;null&#39;&#125;    response.getWriter().print(&quot;hello,axios&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="7-ResponseBody"><a href="#7-ResponseBody" class="headerlink" title="7. @ResponseBody"></a>7. @ResponseBody</h2><ol><li><p>@ResponseBody</p><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p></li><li><p>@ResponseBody响应浏览器json数据</p><p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为 json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为 json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 导入jackson的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;响应浏览器list集合@RequestMapping(&quot;&#x2F;test&#x2F;ResponseBody&#x2F;json&quot;)@ResponseBodypublic List&lt;User&gt; testResponseBody()&#123;    User user1 &#x3D; new User(1001,&quot;admin1&quot;,&quot;123456&quot;,23,&quot;男&quot;);    User user2 &#x3D; new User(1002,&quot;admin2&quot;,&quot;123456&quot;,23,&quot;男&quot;);    User user3 &#x3D; new User(1003,&quot;admin3&quot;,&quot;123456&quot;,23,&quot;男&quot;);    List&lt;User&gt; list &#x3D; Arrays.asList(user1, user2, user3);    return list;&#125;&#x2F;&#x2F;响应浏览器map集合@RequestMapping(&quot;&#x2F;test&#x2F;ResponseBody&#x2F;json&quot;)@ResponseBodypublic Map&lt;String, Object&gt; testResponseBody()&#123;    User user1 &#x3D; new User(1001,&quot;admin1&quot;,&quot;123456&quot;,23,&quot;男&quot;);    User user2 &#x3D; new User(1002,&quot;admin2&quot;,&quot;123456&quot;,23,&quot;男&quot;);    User user3 &#x3D; new User(1003,&quot;admin3&quot;,&quot;123456&quot;,23,&quot;男&quot;);    Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;1001&quot;, user1);    map.put(&quot;1002&quot;, user2);    map.put(&quot;1003&quot;, user3);    return map;&#125;&#x2F;&#x2F;响应浏览器实体类对象@RequestMapping(&quot;&#x2F;test&#x2F;ResponseBody&#x2F;json&quot;)@ResponseBodypublic User testResponseBody()&#123;return user;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="8-RestController注解"><a href="#8-RestController注解" class="headerlink" title="8. @RestController注解"></a>8. @RestController注解</h2><p>​    @RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h2 id="9-拦截器"><a href="#9-拦截器" class="headerlink" title="9. 拦截器"></a>9. 拦截器</h2><ol><li><p>拦截器配置</p><ul><li><p>SpringMVC中的拦截器用于拦截控制器方法的执行 </p></li><li><p>SpringMVC中的拦截器需要实现HandlerInterceptor </p></li><li><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/testRequestEntity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>三个抽象方法</p><ul><li>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法 </li><li>postHandle：控制器方法执行之后执行postHandle() </li><li>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</li></ul></li><li><p>执行顺序</p><ol><li>若每个拦截器的preHandle()都返回true 此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关： preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行 </li><li>若某个拦截器的preHandle()返回了false preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false 的拦截器之前的拦截器的afterCompletion()会执行</li></ol></li></ol><h2 id="10-注解配置MVC"><a href="#10-注解配置MVC" class="headerlink" title="10. 注解配置MVC"></a>10. 注解配置MVC</h2><ol><li><p>创建初始化类，代替web.xml</p><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类， 如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配 置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自 动发现它，并用它来配置Servlet上下文。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer &#123;        &#x2F;**    * 指定spring的配置类    * @return    *&#x2F;    @Override    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;    return new Class[]&#123;SpringConfig.class&#125;;    &#125;        &#x2F;**    * 指定SpringMVC的配置类    * @return    *&#x2F;        @Override    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;    return new Class[]&#123;WebConfig.class&#125;;    &#125;    &#x2F;**    * 指定DispatcherServlet的映射规则，即url-pattern    * @return    *&#x2F;        @Override    protected String[] getServletMappings() &#123;    return new String[]&#123;&quot;&#x2F;&quot;&#125;;    &#125;        &#x2F;**    * 添加过滤器    * @return    *&#x2F;    @Override    protected Filter[] getServletFilters() &#123;        CharacterEncodingFilter encodingFilter &#x3D; new CharacterEncodingFilter();        encodingFilter.setEncoding(&quot;UTF-8&quot;);        encodingFilter.setForceRequestEncoding(true);        HiddenHttpMethodFilter hiddenHttpMethodFilter &#x3D; new        HiddenHttpMethodFilter();        return new Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建SpringConfig配置类，代替spring的配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SpringConfig &#123;&#x2F;&#x2F;ssm整合之后，spring的配置信息写在此类中&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建WebConfig配置类，代替SpringMVC的配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration&#x2F;&#x2F;扫描组件@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)&#x2F;&#x2F;开启MVC注解驱动@EnableWebMvcpublic class WebConfig implements WebMvcConfigurer &#123;        &#x2F;&#x2F;使用默认的servlet处理静态资源    @Override    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer    configurer) &#123;    configurer.enable();    &#125;        &#x2F;&#x2F;配置文件上传解析器    @Bean    public CommonsMultipartResolver multipartResolver()&#123;    return new CommonsMultipartResolver();    &#125;        &#x2F;&#x2F;配置拦截器    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;    MyInterceptor MyInterceptor &#x3D; new MyInterceptor();    registry.addInterceptor(MyInterceptor).addPathPatterns(&quot;&#x2F;**&quot;);    &#125;        &#x2F;&#x2F;配置生成模板解析器    @Bean    public ITemplateResolver templateResolver() &#123;        WebApplicationContext webApplicationContext &#x3D;        ContextLoader.getCurrentWebApplicationContext();        &#x2F;&#x2F; ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过        WebApplicationContext 的方法获得        ServletContextTemplateResolver templateResolver &#x3D; new        ServletContextTemplateResolver(        webApplicationContext.getServletContext());        templateResolver.setPrefix(&quot;&#x2F;WEB-INF&#x2F;templates&#x2F;&quot;);        templateResolver.setSuffix(&quot;.html&quot;);        templateResolver.setCharacterEncoding(&quot;UTF-8&quot;);        templateResolver.setTemplateMode(TemplateMode.HTML);        return templateResolver;    &#125;        &#x2F;&#x2F;生成模板引擎并为模板引擎注入模板解析器    @Bean    public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) &#123;        SpringTemplateEngine templateEngine &#x3D; new SpringTemplateEngine();        templateEngine.setTemplateResolver(templateResolver);        return templateEngine;    &#125;        &#x2F;&#x2F;生成视图解析器并为解析器注入模板引擎    @Bean    public ViewResolver viewResolver(SpringTemplateEngine templateEngine) &#123;    ThymeleafViewResolver viewResolver &#x3D; new ThymeleafViewResolver();    viewResolver.setCharacterEncoding(&quot;UTF-8&quot;);    viewResolver.setTemplateEngine(templateEngine);    return viewResolver;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="11-SpringMVC执行流程"><a href="#11-SpringMVC执行流程" class="headerlink" title="11. SpringMVC执行流程"></a>11. SpringMVC执行流程</h2><ol><li><p>SpringMVC常用组件</p><ul><li><p>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供。</p><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求 </p></li><li><p>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供。</p><p>作用：根据请求的url、method等信息查找Handler，即控制器方法 </p></li><li><p>Handler：处理器，需要工程师开发。</p><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p></li><li><p>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供。</p><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行 </p></li><li><p>ViewResolver：视图解析器，不需要工程师开发，由框架提供。</p><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView </p></li><li><p>View：视图 </p><p>作用：将模型数据通过页面展示给用户</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架 - Spring</title>
      <link href="/2020/10/02/ssm-kuang-jia-spring/"/>
      <url>/2020/10/02/ssm-kuang-jia-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>   轻量级框架。创建性能良好、易于测试、可重用的代码</p><h2 id="2-Spring-Framework"><a href="#2-Spring-Framework" class="headerlink" title="2. Spring Framework"></a>2. Spring Framework</h2><ol><li><p>特性：</p><ul><li><p>非侵入性</p><p>对应用程序本身的结构侵入性较小</p></li><li><p>控制反转IOC（Invension Of Control）</p><p>翻转资源获取方向。把自己创建资源、向环境索取资源转变为环境将资源准备好，我们享受资源注入</p></li><li><p>面向切面编程AOP （Aspect Oriented Programming）</p><p>在不修改源代码的基础下增强代码功能</p></li><li><p>容器</p><p>Spring IOC是一个容器，包含并且管理组件对象的生命周期。组件享受容器的管理，屏蔽了组件创建过程中的大量细节，降低了使用门槛，提高开发效率</p></li><li><p>组件化</p><p>使用简单的组件配置组合成一个最复杂的应用。在Spring中可以使用XML和Java注解组合这些对象</p></li><li><p>声明式</p><p>声明需求即可由框架实现</p></li><li><p>一站式</p><p>在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库</p></li></ul></li><li><p>功能模块</p><ul><li><p>Core Container</p><p>核心容器。在Spring环境下使用任何功能必须基于IOC容器</p></li><li><p>AOP Aspects</p><p>面向切面编程</p></li><li><p>Testing</p><p>提供了对junit或TestNG测试框架的整合</p></li><li><p>Data Access/Integration</p><p>提供了对数据访问/集成的功能</p></li><li><p>Spring MVC</p><p>提供了面向Web应用程序的集成功能</p></li></ul></li></ol><h2 id="3-IOC"><a href="#3-IOC" class="headerlink" title="3. IOC"></a>3. IOC</h2><ol><li><p>思想：</p><p>反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。</p></li><li><p>DI （Dependency Injection）：依赖注入</p><p>组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。DI 是对 IOC 的一种具体实现。</p></li></ol><h2 id="4-两种实现方式"><a href="#4-两种实现方式" class="headerlink" title="4. 两种实现方式"></a>4. 两种实现方式</h2><ul><li><p>BeanFactory： 这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p></li><li><p>ApplicationContext： BeanFactory的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p><ul><li><p>ApplicationContext的主要实现类：</p><ul><li><p>ClassPathXmlApplicationContext </p><p>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器 对象</p></li><li><p>FileSystemXmlApplicationContext</p><p>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</p></li><li><p>ConfigurableApplicationContext</p><p>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力</p></li><li><p>WebApplicationContext</p><p>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中</p></li></ul></li></ul></li></ul><h2 id="5-管理Bean"><a href="#5-管理Bean" class="headerlink" title="5. 管理Bean"></a>5. 管理Bean</h2><ol><li><p>Bean作用域（scope属性）</p><ul><li>singleton（默认） 单例，IOC容器初始化时创建对象</li><li>prototype 多例，获取bean时创建对象</li></ul><p>WebApplicationContext环境下额外的作用域（不常用）：</p><ul><li>request 在一个请求范围内有效</li><li>session 在一个会话范围内有效</li></ul></li><li><p>生命周期</p><ol><li><p>bean对象创建，实例化（调用无参构造器）</p></li><li><p>给bean对象设置属性，依赖注入</p></li><li><p>bean对象初始化之前操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）</p><p>bean后置处理器不是单独针对某一个bean生效，而是针对IOC容 器中所有bean都会执行</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBeanProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring.process.MyBeanProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyBeanProcessor implements BeanPostProcessor &#123;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName)    throws BeansException &#123;        System.out.println(&quot;☆☆☆&quot; + beanName + &quot; &#x3D; &quot; + bean);        return bean;    &#125;    @Override    public Object postProcessAfterInitialization(Object bean, String beanName)    throws BeansException &#123;        System.out.println(&quot;★★★&quot; + beanName + &quot; &#x3D; &quot; + bean);        return bean;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>bean对象初始化（需在配置bean时指定初始化方法 init-method=”initMethod”）</p></li><li><p>bean对象初始化之后操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）</p></li><li><p>bean对象就绪可以使用</p></li><li><p>bean对象销毁（需在配置bean时指定销毁方法 destroy-method=”destroyMethod”）</p></li><li><p>IOC容器关闭</p></li></ol></li><li><p>基于xml</p><ul><li><p>依赖</p><img src="/2020/10/02/ssm-kuang-jia-spring/image-1.png" class=""></li><li><p>resources/applicationContext.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理        通过bean标签配置IOC容器所管理的bean        属性：        id：设置bean的唯一标识        class：设置bean所对应类型的全类名，默认无参构造    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloworld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.ssm.pojo.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取ioc及bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取ioc容器ApplicationContext ioc &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#x2F;&#x2F; 获取ioc容器的bean（方式1）HelloWorld bean &#x3D; (HelloWorld) ioc.getBean(&quot;helloworld&quot;);&#x2F;&#x2F; 【常用】获取ioc容器的bean（方式2）要求IOC容器中指定类型的bean有且只能有一个HelloWorld bean &#x3D; ac.getBean(HelloWorld.class);&#x2F;&#x2F; 获取ioc容器的bean（方式3）HelloWorld bean &#x3D; ac.getBean(&quot;helloworld&quot;, HelloWorld.class);bean.learnSpring();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建对象（利用反射及工厂模式）</p><p>一个bean对应一个对象（单例），接口不能</p><img src="/2020/10/02/ssm-kuang-jia-spring/image-2.png" class=""><img src="/2020/10/02/ssm-kuang-jia-spring/image-3.png" class=""></li><li><p>依赖注入</p><ul><li><p>setter注入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.spring.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过成员变量的set方法赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--类类型方法一：引用外部bean--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--类类型方法二：级联--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--类类型方法三：内部bean--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzThree<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.spring.pojo.Clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--通过成员变量的set方法赋值--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.spring.pojo.Clazz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过成员变量的set方法赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clazzOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--List类型方法一--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--&lt;value>&lt;/value> --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--List类型方法二--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>People<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Map类型方法一--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key2<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--List类型方法二--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>People<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Map类型方法二--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>People<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置集合类型的bean，需要util约束--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置集合类型的bean，需要util约束--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key2<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--命名空间赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.spring.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sam<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>mapBean-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造器注入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>peopleTwo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.spring.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过有参构造器赋值，只有一个构造器按顺序填参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>Jerry<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>管理数据源</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- MySQL驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 数据源 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引入外部属性文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>druidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>FactoryBean</p><p>配置一个 FactoryBean类型的实现类bean，在获取bean的时候得到的并不是class属性中配置的实现类的对象，而是 getObject()方法的返回值（交给ioc管理）。通过这种机制，Spring可以把复杂组件创建的详细过程和繁琐细节都屏蔽起来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserFactoryBean implements FactoryBean&lt;User&gt; &#123;    @Override    public User getObject() throws Exception &#123;        return new User();    &#125;    @Override    public Class&lt;?&gt; getObjectType() &#123;    return User.class;    &#125;&#125;@Testpublic void testUserFactoryBean()&#123;&#x2F;&#x2F;获取IOC容器ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;spring-factorybean.xml&quot;);    User user &#x3D; (User) ac.getBean(&quot;user&quot;);    System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.bean.UserFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>基于xml的自动装配</p><p>autowire，根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的<strong>类类型或接口类型</strong>属性赋值</p><ul><li>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值 若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null 若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</li><li>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</li></ul></li></ul></li><li><p>基于注解</p><p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。 自定义bean的id 可通过标识组件的注解的value属性设置自定义的bean的id</p><ul><li><p>@Component：将类标识为普通组件 </p></li><li><p>@Controller：将类标识为控制层组件 </p></li><li><p>@Service：将类标识为业务层组件 </p></li><li><p>@Repository：将类标识为持久层组件</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- context:exclude-filter标签：指定排除规则 --></span><span class="token comment">&lt;!--type：设置排除或包含的依据type="annotation"，根据注解排除，expression中设置要排除的注解的全类名type="assignable"，根据类型排除，expression中设置要排除的类型的全类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span><span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--&lt;context:exclude-filter type="assignable"expression="全类名"/>--></span>    <span class="token comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --></span><span class="token comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --></span><span class="token comment">&lt;!-- 此时必须设置use-default-filters="false"，因为默认规则即扫描指定包下所有类 --></span><span class="token comment">&lt;!--    type：设置排除或包含的依据    type="annotation"，根据注解指定，expression中设置要指定的注解的全类名    type="assignable"，根据类型指定，expression中设置要指定的类型的全类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span><span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--&lt;context:include-filter type="assignable"    expression="全类名"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>自动装配</p><ul><li><p>@Autowired，不需要提供setXxx()方法，可以标记在成员变量、构造器和set方法上</p></li><li><p>工作流程</p><p>首先根据所需要的组件类型到IOC容器中查找 </p><ul><li>能够找到唯一的bean：直接执行装配 </li><li>如果完全找不到匹配这个类型的bean：装配失败 </li><li>和所需类型匹配的bean不止一个 </li><li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配 <ul><li>能够找到：执行装配 </li><li>找不到：装配失败 </li></ul></li><li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配 <ul><li>能够找到：执行装配 </li><li>找不到：装配失败</li></ul></li></ul></li></ul></li></ul><h2 id="6-AOP"><a href="#6-AOP" class="headerlink" title="6. AOP"></a>6. AOP</h2><ol><li><p>描述：</p><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术。本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p></li><li><p>相关概念</p><ul><li>Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；封装通知方法的类。</li><li>Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；向目标对象应用通知之后创建的代理对象。</li><li>Pointcut：切入点，即一组连接点的集合；每个类的方法中都包含多个连接点，</li><li>Advice：增强，指特定连接点上执行的动作；</li><li>Introduction：引介，指为一个已有的Java对象动态地增加新的接口；</li><li>Weaving：织入，指将切面整合到程序的执行流程中；</li><li>Interceptor：拦截器，是一种实现增强的方式；</li><li>Target Object：目标对象，即真正执行业务的核心逻辑对象；被代理的目标对象。</li><li>AOP Proxy：AOP代理，是客户端持有的增强后的对象引用；向目标对象应用通知之后创建的代理对象。</li></ul></li><li><p>作用：</p><ul><li>简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。 </li><li>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。</li></ul></li><li><p>基于注解的AOP</p><ol><li><p>说明</p><ul><li><p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口。 </p></li><li><p>cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口。 </p></li><li><p>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p><ul><li>@Aspect 将当前组件表示为切面</li><li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li><li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li><li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li><li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li><li>@Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。</li></ul></li></ul></li><li><p>依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    基于注解的AOP的实现：    1、将目标对象和切面交给IOC容器管理（注解+扫描）    2、开启AspectJ的自动代理，为目标对象自动生成代理    3、将切面类通过注解@Aspect标识--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>包名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切入点执行语法</p><img src="/2020/10/02/ssm-kuang-jia-spring/image-4.png" class=""></li><li><p>获取信息</p><ul><li><p>获取连接点信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Before(&quot;execution(public int com.aop.annotation.TestImpl.*(..))&quot;) public void beforeMethod(JoinPoint joinPoint)&#123;     &#x2F;&#x2F;获取连接点的声明信息     String methodName &#x3D; joinPoint.getSignature().getName();     &#x2F;&#x2F;获取目标方法到的实参信息     String args &#x3D; Arrays.toString(joinPoint.getArgs());     System.out.println(&quot;Logger--&gt;前置通知，方法名：&quot;+methodName+&quot;，参数：&quot;+args); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取目标方法返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@AfterReturning(value &#x3D; &quot;execution(* com.aop.annotation.TestImpl.*(..))&quot;, returning &#x3D; &quot;result&quot;)public void afterReturningMethod(JoinPoint joinPoint, Object result)&#123;    String methodName &#x3D; joinPoint.getSignature().getName();    System.out.println(&quot;Logger--&gt;返回通知，方法名：&quot;+methodName+&quot;，结果：&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取目标方法的异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@AfterThrowing(value &#x3D; &quot;execution(* com.aop.annotation.TestImpl.*(..))&quot;, throwing &#x3D; &quot;ex&quot;)public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex)&#123;    String methodName &#x3D; joinPoint.getSignature().getName();    System.out.println(&quot;Logger--&gt;异常通知，方法名：&quot;+methodName+&quot;，异常：&quot;+ex);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>@Around</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Around(&quot;execution(* com.aop.annotation.TestImpl.*(..))&quot;)public Object aroundMethod(ProceedingJoinPoint joinPoint)&#123;    String methodName &#x3D; joinPoint.getSignature().getName();    String args &#x3D; Arrays.toString(joinPoint.getArgs());    Object result &#x3D; null;    try &#123;    System.out.println(&quot;环绕通知--&gt;目标对象方法执行之前&quot;);    &#x2F;&#x2F;目标方法的执行，目标方法的返回值一定要返回给外界调用者    result &#x3D; joinPoint.proceed();    System.out.println(&quot;环绕通知--&gt;目标对象方法返回值之后&quot;);    &#125; catch (Throwable throwable) &#123;    throwable.printStackTrace();    System.out.println(&quot;环绕通知--&gt;目标对象方法出现异常时&quot;);    &#125; finally &#123;    System.out.println(&quot;环绕通知--&gt;目标对象方法执行完毕&quot;);    &#125;    return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切面的优先级<br>相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。 </p><ul><li><p>外部切面的优先级比内部切面的优先级高</p></li><li><p>使用@Order注解可以控制切面的优先级： @Order(较小的数)：优先级高 @Order(较大的数)：优先级低</p></li></ul></li></ol></li></ol><h2 id="7-声明式事务"><a href="#7-声明式事务" class="headerlink" title="7. 声明式事务"></a>7. 声明式事务</h2><ol><li><p>JdbcTemplate</p><ol><li><p>依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Spring 持久化层支持jar包 --></span>    <span class="token comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个    jar包 --></span>    <span class="token comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Spring 测试相关 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- junit测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- MySQL驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--扫描组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring.tx.annotation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 导入外部属性文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 配置数据源 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>druidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置 JdbcTemplate --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 装配数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>druidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)public class JDBCTemplateTest &#123;    @Autowired    private JdbcTemplate jdbcTemplate;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于注解</p><ol><li>添加事务配置</li></ol> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置事务管理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--开启事务的注解驱动通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务--></span><span class="token comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>回滚策略<ul><li>rollbackFor属性：需要设置一个Class类型的对象 </li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名 </li><li>noRollbackFor属性：需要设置一个Class类型的对象 </li><li>rollbackFor属性：需要设置一个字符串类型的全类名</li></ul></li><li>事务隔离级别<ul><li>读未提交：READ UNCOMMITTED 允许Transaction01读取Transaction02未提交的修改。 </li><li>读已提交：READ COMMITTED、 要求Transaction01只能读取Transaction02已提交的修改。 </li><li>可重复读：REPEATABLE READ 确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。 </li><li>串行化：SERIALIZABLE 确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</li></ul></li><li>事务传播行为<ul><li>@Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开 启的事务可用，那么就在这个事务中运行。</li><li>@Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启 的事务，都要开启新事务。</li></ul></li></ol></li><li><p>基于xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置事务通知和切入点表达式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(*    com.learn.spring.tx.xml.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- tx:advice标签：配置事务通知 --></span><span class="token comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --></span><span class="token comment">&lt;!-- transaction-manager属性：关联事务管理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- tx:method标签：配置具体的事务方法 --></span>        <span class="token comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- read-only属性：设置只读属性 --></span>        <span class="token comment">&lt;!-- rollback-for属性：设置回滚的异常 --></span>        <span class="token comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --></span>        <span class="token comment">&lt;!-- isolation属性：设置事务的隔离级别 --></span>        <span class="token comment">&lt;!-- timeout属性：设置事务的超时属性 --></span>        <span class="token comment">&lt;!-- propagation属性：设置事务的传播行为 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">rollbackfor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Exception<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRES_NEW<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">rollbackfor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Exception<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRES_NEW<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">rollbackfor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Exception<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRES_NEW<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA集合</title>
      <link href="/2020/06/29/java-ji-he/"/>
      <url>/2020/06/29/java-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA集合"><a href="#JAVA集合" class="headerlink" title="JAVA集合"></a>JAVA集合</h1><img src="/2020/06/29/java-ji-he/image-1.png" class=""><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>优点：是一种简单的线性序列，可以快速地访问数组元素，效率高。如果从效率和类型检查的角度讲，数组是最好的。</p></li><li><p>缺点：不灵活。容量需要事先定义好，不能随着需求变化扩容。</p></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>数据类型的参数化，数据类型的一个占位符（形式参数）。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>有序，可重复。</p><p>有三个实现类。ArrayList、LinkedList和Vector。</p><ul><li>在末尾添加一个元素：<code>boolean add(E e)</code></li><li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li><li>是否为空：<code>boolean isEmpty()</code></li><li>删除某个元素：<code>boolean remove(Object e)</code></li><li>清空：<code>void clear()</code></li><li>获取指定索引的元素：<code>E get(int index)</code></li><li>获取链表大小（包含元素的个数）：<code>int size()</code></li><li>添加一个list：<code>boolean addAll(Collection c)</code></li><li>删除与另一个list相同元素：<code>boolean removeAll(Collection c)</code></li><li>取交集：<code>boolean retainAll(Collection c)</code></li><li>是否包含另一个list：<code>boolean containsAll(Collection c)</code></li></ul><h3 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h3><p>用数组实现的存储。查询效率高，增删效率低，线程不安全。</p><p>通过数组扩容的方式实现不限制大小。</p><ul><li><p>指定索引添加或替换：<code>boolean set(int index, E e)</code></p></li><li><p>删除指定索引的元素：<code>E remove(int index)</code></p></li><li><p>是否存在某个元素，返回第一次出现的索引：<code>int indexOf(E e)</code></p></li><li><p>是否存在某个元素，返回最后一次出现的索引：<code>int indexOf(E e)</code></p></li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>用双向链表实现的存储。查询效率低，增删效率高，线程不安全。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>用数组实现的存储，效率低，线程安全。相关方法做了同步检查synchronized。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>存储键值对。键不可重复。</p><p>实现类HashMap、TreeMap、HashTable、Properties</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>线程不安全，效率高，允许key或者value为null，</p><ul><li>添加一个键值对：<code>Object put(Object key,Object value)</code></li><li>通过键查找值：<code>Object get(Object key)</code></li><li>是否为空：<code>boolean isEmpty()</code></li><li>删除指定键的键值对：<code>Object remove(Object key)</code></li><li>是否包含键对象：<code>boolean containsKey(Object key)</code></li><li>是否包含值对象：<code>boolean containsValue(Object value)</code></li><li>清空：<code>void clear()</code></li><li>获取Map大小（包含键值对的个数）：<code>int size()</code></li><li>添加一个Map中的所有对象：<code>void putAll(Map m)</code></li></ul><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>红黑二叉树的典型实现，排序key。</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>线程安全，效率低，不允许key或者value为null。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>无序，不可重复。</p><ul><li>将元素添加进<code>Set&lt;E&gt;</code>：<code>boolean add(E e)</code></li><li>将元素从<code>Set&lt;E&gt;</code>删除：<code>boolean remove(Object e)</code></li><li>判断是否包含元素：<code>boolean contains(Object e)</code></li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>无序的，实现了<code>Set</code>接口，并没有实现<code>SortedSet</code>接口。</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>有序的，实现了<code>SortedSet</code>接口。</p><h2 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h2><ul><li>迭代器遍历List</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();for (Iterator&lt;String&gt; it &#x3D; list.iterator(); it.hasNext(); ) &#123;     String s &#x3D; it.next();     System.out.println(s);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代器遍历Set</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">Set&lt;String&gt; set &#x3D; new HashSet&lt;&gt;();for (Iterator&lt;String&gt; it &#x3D; set.iterator(); it.hasNext(); ) &#123;     String s &#x3D; it.next();     System.out.println(s);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代器遍历Map</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">Map&lt;Integer,String&gt; map &#x3D; new HashMap&lt;&gt;();Set &lt;Entry&lt;String,String&gt;&gt; s &#x3D; map.entrySet();for (Iterator&lt;String&gt; it &#x3D; s.iterator(); it.hasNext(); ) &#123;     Entry e &#x3D; it.next();     System.out.println(e.getKey() + e.getValue());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">Map&lt;Integer,String&gt; map &#x3D; new HashMap&lt;&gt;();Set&lt;String&gt; s &#x3D; map.keySet();for(Iterator&lt;String&gt; it &#x3D; s.iterator(); it.hasNext(); )&#123;    String key &#x3D; it.next();    System.out.println(key + map.get(key));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><ul><li><p><code>void sort(List)</code>：对List元素升序排列</p></li><li><p><code>void shuffle(List)</code>：对List容器内元素随机排列</p></li><li><p><code>void reverse(List)</code>：对List元素逆转排列</p></li><li><p><code>void fill(List,Object)</code>：用一个特定的对象重写List容器</p></li><li><p><code>int binarySearch(List,Object)</code>：顺序折半查找</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/2020/06/13/lambda/"/>
      <url>/2020/06/13/lambda/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">(param1,param2) -&gt; &#123;&#x2F;&#x2F; 重写方法的代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用lambda必须有接口（函数式接口），接口中有且仅有一个抽象方法</li><li>使用lambda必须具有上下文推断</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架 - MyBatis</title>
      <link href="/2020/05/17/ssm-kuang-jia-mybatis/"/>
      <url>/2020/05/17/ssm-kuang-jia-mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架-MyBatis"><a href="#SSM框架-MyBatis" class="headerlink" title="SSM框架 - MyBatis"></a>SSM框架 - MyBatis</h1><h2 id="1-描述："><a href="#1-描述：" class="headerlink" title="1. 描述："></a>1. 描述：</h2><p>   基于java的持久层框架，包括SQL Maps和Data Access Objects（DAO）</p><h2 id="2-MyBatis特性："><a href="#2-MyBatis特性：" class="headerlink" title="2. MyBatis特性："></a>2. MyBatis特性：</h2><ul><li>支持定制化SQL、存储过程以及高级映射的优秀的持久层框架</li><li>避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li><li>可以使用简单的XML或注解用于配置和原始映射，将接口和JAVA的pojo映射成数据库中的记录</li><li>半自动的ORM框架</li></ul><h2 id="3-核心配置文件"><a href="#3-核心配置文件" class="headerlink" title="3. 核心配置文件"></a>3. 核心配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--        MyBatis核心配置文件中，标签的顺序：        properties?,settings?,typeAliases?,typeHandlers?,        objectFactory?,objectWrapperFactory?,reflectorFactory?,        plugins?,environments?,databaseIdProvider?,mappers?    --></span>    <span class="token comment">&lt;!--引入properties文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--设置类型别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            typeAlias：设置某个类型的别名            属性：            type：设置需要设置别名的类型            alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名            且不区分大小写        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.ssm.mybatis.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.ssm.mybatis.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>              <span class="token comment">&lt;!--    environments：配置多个连接数据库的环境    属性：    default：设置默认使用的环境的id--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        environment：配置某个具体的环境        属性：        id：表示连接数据库的环境的唯一标识，不能重复    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            transactionManager：设置事务管理方式            属性：            type="JDBC|MANAGED"            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事            务的提交或回滚需要手动处理            MANAGED：被管理，例如Spring        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--            dataSource：配置数据源            属性：            type：设置数据源的类型            type="POOLED|UNPOOLED|JNDI"            POOLED：表示使用数据库连接池缓存数据库连接            UNPOOLED：表示不使用数据库连接池            JNDI：表示使用上下文中的数据源        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--设置连接数据库的驱动--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--设置连接数据库的连接地址--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--设置连接数据库的用户名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--设置连接数据库的密码--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入映射文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappers/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--            以包为单位引入映射文件            要求：            1、mapper接口所在的包要和映射文件所在的包一致            2、mapper接口要和映射文件的名字一致        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-MyBatis映射文件"><a href="#4-MyBatis映射文件" class="headerlink" title="4. MyBatis映射文件"></a>4. MyBatis映射文件</h2><ul><li><p>ORM（Object Relationship  Mapping）：对象关系映射</p><ul><li>对象：Java实体类对象</li><li>关系：关系型数据库</li><li>映射：二者对应关系</li></ul></li><li><p>两个一致：</p><ul><li>mapper接口的全类名和映射文件的命名空间（namespace）一致</li><li>mapper接口中方法名和映射文件中编写SQL的标签的id属性一致</li></ul></li></ul><h2 id="5-SqlSessionFactory"><a href="#5-SqlSessionFactory" class="headerlink" title="5. SqlSessionFactory"></a>5. SqlSessionFactory</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取核心配置文件的输入流InputStream r &#x3D;  Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);&#x2F;&#x2F; 获取SqlSessionFactoryBuilder对象SqlSessionFactoryBuilder sqlSessionFactoryBuilder &#x3D; new SqlSessionFactoryBuilder();&#x2F;&#x2F; 获取SqlSessionFactory对象SqlSessionFactory sqlSessionFactory &#x3D;  sqlSessionFactoryBuilder.build(r);&#x2F;&#x2F; 获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库对象SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();&#x2F;&#x2F; 获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库对象&#x2F;&#x2F; SqlSession sqlSession &#x3D; sqlSessionFactory.openSession(true);&#x2F;&#x2F; 获取UserMapper的代理实现类对象UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);&#x2F;&#x2F; 调用mapper接口中的方法，实现添加用户信息的功能int result &#x3D; mapper.insertUser();System.out.println(&quot;结果：&quot; + result);&#x2F;&#x2F; 提交事务sqlSession.commit();&#x2F;&#x2F; 关闭SqlSessionsqlSession.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-结果映射"><a href="#6-结果映射" class="headerlink" title="6. 结果映射"></a>6. 结果映射</h2><ul><li>resultType：设置结果类型，即查询的数据要转换的java对象</li><li>resultMap：自定义映射，处理多对一或一对多</li></ul><h2 id="7-获取参数值"><a href="#7-获取参数值" class="headerlink" title="7. 获取参数值"></a>7. 获取参数值</h2><ul><li>${}：本质是字符串拼接。若为字符串类型或日期类型，需要手动加单引号（批量删除时用，in (${ids})）</li><li>#{}：本质是占位符赋值。若为字符串类型或日期类型，自动加单引号。（常用）</li><li>arg0，arg1…param1,param2</li><li>以map集合作为参数，根据key取值</li><li>以实体类作为参数，根据字段名取值</li><li>@Param(“key”)，根据key取值</li><li>@MapKey(“id”)，把查询出的数据放在Map中，以id为键</li></ul><h2 id="8-resultMap"><a href="#8-resultMap" class="headerlink" title="8. resultMap"></a>8. resultMap</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--多对一的处理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptAndEmpResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--一对多的处理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-动态SQL"><a href="#9-动态SQL" class="headerlink" title="9. 动态SQL"></a>9. 动态SQL</h2><ul><li><p>if</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByMoreTJ<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and ename = #&#123;ename&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and age = #&#123;age&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and sex = #&#123;sex&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>where</p><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字；若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByMoreTJ2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ename = #&#123;ename&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and age = #&#123;age&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and sex = #&#123;sex&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>trim</p><p>trim用于去掉或添加标签中的内容 常用属性： prefix：在trim标签中的内容的前面添加某些内容 prefixOverrides：在trim标签中的内容的前面去掉某些内容 suffix：在trim标签中的内容的后面添加某些内容 suffixOverrides：在trim标签中的内容的后面去掉某些内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByMoreTJ<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ename = #&#123;ename&#125; and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            age = #&#123;age&#125; and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            sex = #&#123;sex&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>choose、when、 otherwise</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpListByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename != <span class="token punctuation">'</span><span class="token punctuation">'</span> and ename != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ename = #&#123;ename&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != <span class="token punctuation">'</span><span class="token punctuation">'</span> and age != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            age = #&#123;age&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != <span class="token punctuation">'</span><span class="token punctuation">'</span> and sex != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            sex = #&#123;sex&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != <span class="token punctuation">'</span><span class="token punctuation">'</span> and email != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            email = #&#123;email&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>foreach</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertMoreEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into t_emp values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_emp where    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    eid = #&#123;eid&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete from t_emp where eid in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10-缓存"><a href="#10-缓存" class="headerlink" title="10. 缓存"></a>10. 缓存</h2><ol><li><p>一级缓存</p><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问 使一级缓存失效的四种情况： </p><ul><li><p>不同的SqlSession对应不同的一级缓存</p></li><li><p>同一个SqlSession但是查询条件不同</p></li><li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p></li><li><p>同一个SqlSession两次查询期间手动清空了缓存<code>sqlSession.clearCache()</code></p></li></ul></li><li><p>二级缓存</p><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取 二级缓存开启的条件： </p><ul><li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li><li>在映射文件中设置标签</li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口 </li></ul><p>使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p></li><li><p>缓存配置</p><p>在mapper配置文件中添加的cache标签可以设置一些属性： </p><ul><li>eviction属性：缓存回收策略，默认的是 LRU。 <ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 </li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 </li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 </li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 </li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li><li>size属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li><li>readOnly属性：只读， true/false true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重 要的性能优势。 false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li></ul></li><li><p>缓存顺序</p><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 如果二级缓存没有命中，再查询一级缓存 如果一级缓存也没有命中，则查询数据库。SqlSession关闭之后，一级缓存中的数据会写入二级缓存。</p></li></ol><h2 id="11-分页"><a href="#11-分页" class="headerlink" title="11. 分页"></a>11. 分页</h2><ol><li><p>依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置分页插件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--设置分页插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用分页插件</p><ol><li><p>在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能 </p><ul><li>pageNum：当前页的页码 </li><li>pageSize：每页显示的条数</li></ul></li><li><p>在查询获取list集合之后，使用PageInfo pageInfo = new PageInfo&lt;&gt;(List list, int navigatePages)获取分页相关数据 </p><ul><li>list：分页之后的数据 </li><li>navigatePages：导航分页的页码数</li></ul></li><li><p>分页相关数据 </p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PageInfo&#123; pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8, list&#x3D;Page&#123;count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30, pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false&#125;, prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true, hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8, navigatepageNums&#x3D;[4, 5, 6, 7, 8] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>pageNum：当前页的页码 </li><li>pageSize：每页显示的条数</li><li>size：当前页显示的真实条数 </li><li>total：总记录数 </li><li>pages：总页数 </li><li>prePage：上一页的页码 </li><li>nextPage：下一页的页码 </li><li>isFirstPage/isLastPage：是否为第一页/最后一页 </li><li>hasPreviousPage/hasNextPage：是否存在上一页/下一页 </li><li>navigatePages：导航分页的页码数 </li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA多线程</title>
      <link href="/2020/04/12/java-duo-xian-cheng/"/>
      <url>/2020/04/12/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-多线程"><a href="#JAVA-多线程" class="headerlink" title="JAVA 多线程"></a>JAVA 多线程</h1><h2 id="并发并行"><a href="#并发并行" class="headerlink" title="并发并行"></a>并发并行</h2><ul><li><p>并发：两个或多个事件在同一时间段发生（交替）</p></li><li><p>并行：两个或多个事件在同一时刻发生（同时）</p></li></ul><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>一个程序至少有一个进程，一个进程至少有一个线程。</p><ul><li><p>进程：一个内存中运行的应用程序。每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程。是系统运行程序的基本单位；系统运行一个程序是一个进程从创建、运行到消亡的过程。</p></li><li><p>线程：是进程中的一个执行单元，负责当前进程中的程序的执行。一个进程中至少有一个线程，可以有多个线程。</p></li></ul><p>和多线程相比，多进程的缺点在于：</p><ol><li>创建进程比创建线程开销大，尤其是在Windows系统上；</li><li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。</li></ol><p>多进程的优点在于：</p><p>​    多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p><p>主线程：执行main方法的线程</p><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><ul><li><p>分时调度</p><p>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间</p></li><li><p>抢占式调度（JAVA）</p><p>优先让优先级高的线程使用CPU，优先级相同随机选择一个线程</p></li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多个现车个互不影响（在不同的栈空间）</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul><li><p>方式一</p><ol><li>创建一个Thread子类</li><li>在Thread类的子类中重写Thread类中的run方法，设置线程任务</li><li>创建Thread子类的对象</li><li>执行Thread类中的start方法（主线程与新线程）</li></ol></li><li><p>方式二</p><ol><li>创建一个实现Runnable接口的类</li><li>实现run方法</li><li>创建实现类的对象</li><li>创建Thread类对象，构造方法中传递Runnable接口的实现类对象</li><li>执行Thread类中的start方法（主线程与新线程）</li></ol></li></ul><p>方式二避免了单继承的局限性，增强了程序的扩展性，降低了耦合性</p><ul><li><p>匿名内部类实现线程创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Thread子类实现new Thread()&#123;    @Override    public void run()&#123;        System.out.println(Thread.currentThread().getName());    &#125;&#125;.start();&#x2F;&#x2F; Runnable接口实现new Thread(new Runnable()&#123;    @Override    public void run()&#123;        System.out.println(Thread.currentThread().getName());    &#125;&#125;).start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取当前线程名称Thread.currentThread().getName(); &#x2F;&#x2F; 获取线程名称Thread t1 &#x3D; new Thread();t1.getName();&#x2F;&#x2F; 设置线程名称t1.setName(&quot;线程1&quot;);&#x2F;&#x2F; 当前线程暂停执行指定的毫秒数Thread.sleep(1000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>多个线程共享同一数据</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ol><li><p>同步代码块</p><p>线程执行到synchronized会检查是否有锁对象，如果有进入同步中执行，如果没有就阻塞等待。同步执行完归还同步锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">synchronized(同步锁对象)&#123;&#x2F;&#x2F; 需要同步的代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>同步方法</p><ul><li>方法上添加synchronized，同步锁对象是this</li><li>静态同步方法的锁对象是类.class</li></ul></li><li><p>锁机制（Lock锁）更先进</p><p>在成员位置创建一个ReentrantLock（实现了Lock接口）对象，在出现安全问题的代码前调用lock获取锁，在出现安全问题的代码后调用unlock释放锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Lock l &#x3D; new Lock();l.lock();&#x2F;&#x2F; 线程安全问题代码l.unlock(); &#x2F;&#x2F; 一般放在try catch后的finally中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul><li>New：新创建的线程，尚未执行</li><li>Runnable：运行中的线程，正在执行<code>run()</code>方法的Java代码</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；具有CPU的执行资格，等待CPU空闲</li><li>Waiting：运行中的线程，因为某些操作在等待中；通过<code>notify()</code>唤醒</li><li>Timed Waiting：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；放弃CPU的执行资格，CPU空闲也不执行；休眠结束唤醒</li><li>Terminated：线程已终止，因为<code>run()</code>方法执行完毕</li></ul><p>线程终止的原因有：</p><ul><li>线程正常终止：<code>run()</code>方法执行到<code>return</code>语句返回；</li><li>线程意外终止：<code>run()</code>方法因为未捕获的异常导致线程终止；</li><li>对某个线程的<code>Thread</code>实例调用<code>stop()</code>方法强制终止（强烈不推荐使用）。</li></ul><h2 id="线程通信-等待唤醒机制"><a href="#线程通信-等待唤醒机制" class="headerlink" title="线程通信-等待唤醒机制"></a>线程通信-等待唤醒机制</h2><p>等待唤醒机制使各线程有效利用资源，解决线程间处理同一个资源的问题</p><ol><li><p>wait</p><p>线程不再活动参与调度，进入wait set中，这是线程状态是WAITING。等待其他线程执行notify后从wait set中释放出来，重新进入调度队列中</p></li><li><p>notify</p><p>选取所通知对象的wait set中的一个线程释放</p></li><li><p>notifyAll</p><p>释放所通知对象的wait set中的所有线程</p></li></ol><ul><li>在<code>synchronized</code>内部可以调用<code>wait()</code>使线程进入等待状态；</li><li>必须在已获得的锁对象上调用<code>wait()</code>方法；</li><li>在<code>synchronized</code>内部可以调用<code>notify()</code>或<code>notifyAll()</code>唤醒其他等待线程；</li><li>必须在已获得的锁对象上调用<code>notify()</code>或<code>notifyAll()</code>方法；</li><li>已唤醒的线程还需要重新获得锁后才能继续执行。</li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>使线程可以复用，减少了反复创建和销毁线程的时间</p><p>线程池是一个容器。当程序第一次启动时，创建多个线程保存在集合中。没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p><ul><li>降低资源消耗</li><li>提高响应速度</li><li>提高线程可管理性</li></ul><p>java.util.concurrent.Executors:线程池的工厂类</p><ul><li><p>创建线程池</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">ExecutorService es &#x3D; Executors.newFixedThreadPool(2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>submit执行线程任务</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">es.submit(new Runnable() &#123;    @Override    public void run() &#123;    System.out.println(Thread.currentThread().getName());    &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>销毁线程池（不建议使用）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">es.shutdown();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2019/09/30/java-servlet/"/>
      <url>/2019/09/30/java-servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="C-S、B-S架构"><a href="#C-S、B-S架构" class="headerlink" title="C/S、B/S架构"></a>C/S、B/S架构</h2><ol><li>Client/Server架构<ul><li>在客户端安装特定软件</li><li>图形显示效果好</li><li>服务器功能升级，需要客户端也同步升级，不利于维护</li></ul></li><li>Browser/Server架构<ul><li>无需安装客户端，浏览器可访问</li><li>功能升级，只需升级服务器端</li><li>图形显示效果一般</li><li>需要通过http协议访问</li></ul></li></ol><h2 id="常见服务器"><a href="#常见服务器" class="headerlink" title="常见服务器"></a>常见服务器</h2><ol><li>Tomcat 免费开源、支持servlet和JSP规范</li><li>jetty 运行效率比Tomcat高</li><li>TODO 后续补充…</li></ol><h2 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h2><ul><li>bin 存放二进制可执行文件</li><li>conf 存放配置信息</li><li>lib 类库，jar包</li><li>logs 日志文件</li><li>temp 运行时产生的临时数据</li><li>webapps 存放web项目</li><li>work 运行时生成的文件</li></ul><h2 id="Servlet运行测试"><a href="#Servlet运行测试" class="headerlink" title="Servlet运行测试"></a>Servlet运行测试</h2><ol><li><p>概念：</p><p>Server Applet的简称，是服务端的程序，可交互式的处理客户端发送到服务端的请求，并完成操作响应。</p></li><li><p>作用：</p><ul><li>接收客户端请求，完成操作</li><li>动态生成网页</li><li>将包含操作结果的动态网页响应给客户端</li></ul></li><li><p>开发环境：</p><p>lib/servlet-api.jar配置到classpath中</p></li><li><p>实现Servlet的五个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; Tomcat10的servlet-api.jar下包名改成了jakartaimport jakarta.servlet.*;import java.io.IOException;public class MyServlet implements Servlet &#123;    public void init(ServletConfig servletConfig) throws ServletException &#123;    &#125;    public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException &#123;    &#125;    public void destroy()&#123;    &#125;    public String getServletInfo()&#123;        return null;    &#125;    public ServletConfig getServletConfig()&#123;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--配置Servlet --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>myServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置Servlet 正整数或0则在servlet加载时执行，值越小优先级越高。未配置或负数则在servlet被请求时再加载--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-standup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-standup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 对servlet做映射 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 与servelet的name一致--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>myServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/myservlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启Tomcat，访问localhost:8080/myWeb/myservlet</p></li></ol><h2 id="IDEA部署Tomcat"><a href="#IDEA部署Tomcat" class="headerlink" title="IDEA部署Tomcat"></a>IDEA部署Tomcat</h2><img src="/2019/09/30/java-servlet/image-1.png" class=""><img src="/2019/09/30/java-servlet/image-2.png" class=""><img src="/2019/09/30/java-servlet/image-3.png" class=""><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ol><li><p>描述：超文本传输协议，给予请求和响应模式的、无状态的、应用层的协议，运行于TCP协议基础之上。</p></li><li><p>特点：</p><ul><li>支持客户端/服务器模式</li><li>简单快速：客户端指向服务器发送请求方法和路径，服务器即可响应数据，通信速度很快</li><li>灵活：http允许传输任意类型的数据，传输的数据类型由Content-type标识</li><li>无连接：每次TCP连接只处理一个或多个请求，服务器处理完请求即断开连接，节省时间。（HTTP1.1会等几秒断开，如果有新连接则暂时不断）</li><li>无状态：HTTP协议是无状态协议，对事务处理没有记忆能力</li><li>HTTP1.1：一个TCP连接上可以传送多个HTTP请求，多个请求和响应可以重叠进行，增加更多的响应头和请求头，Connection报头来控制</li></ul></li><li><p>通信流程：</p><ul><li>客户端与服务器建立连接（三次握手）</li><li>客户端向服务端发送请求</li><li>服务器接收请求，并根据请求返回响应为文件作为应答</li><li>客户端与服务器关闭连接（四次挥手）</li></ul></li><li><p>请求报文组成：</p><ul><li>请求行：请求方法/地址 URI协议/版本</li><li>请求头：request header</li><li>空行</li><li>请求正文</li></ul></li><li><p>响应报文组成：</p><ul><li>状态行</li><li>响应头 response header</li><li>空行</li><li>响应正文</li></ul></li></ol><h2 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h2><ol><li><p>核心接口和类</p><p>除了实现Servlet接口，还可以通过继承GenericServlet或HttpServlet类实现</p></li><li><p>Servlet接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void init(ServletConfig servletConfig);public void service(ServletRequest request, ServletResponse response);public void destroy();public String getServletInfo();public ServletConfig getServletConfig();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>GenericServlet抽象类</p><p>提供了init()和destroy()的简单实现，只需继承后重写service()方法</p></li><li><p>HttpServlet类（推荐）</p><p>与协议有关的实现，继承了GenericServlet。HTTPServlet子类通过service()方法判断请求类型查找子类重写的方法。HTTPServlet子类至少重写一个方法：doGet、doPost、doPut、doDelete</p></li></ol><h2 id="注解（Servlet-3-0后支持）"><a href="#注解（Servlet-3-0后支持）" class="headerlink" title="注解（Servlet 3.0后支持）"></a>注解（Servlet 3.0后支持）</h2><p>@WebServlet(name,value,urlPatterns,loadOnStartup)</p><ul><li>name：同<servlet-name></li><li>value：同<url-pattern>，可配置多个</li><li>urlPatterns：同value，不能同时使用</li><li>loadOnStartup：同<load-on-startup></li></ul><h2 id="Servlet注解"><a href="#Servlet注解" class="headerlink" title="Servlet注解"></a>Servlet注解</h2><ol><li><p>request对象</p><ul><li><p>get明文传递，效率高，数据量小，不安全；post密文传递，数据量大，安全，效率低</p></li><li><p>主要方法</p><ul><li>String getParameter(String name) ：根据表单组件名称获取提交数据</li><li>void setCharacterEncoding(String charset)：指定每个请求的编码</li><li>getRequestDispatcher(“/otherServlet”)：转发跳转</li><li>setAttribute(key,value)：存数据</li><li>getAttribute(key)：取数据</li></ul></li></ul></li><li><p>response对象</p><ul><li><p>主要方法</p><ul><li>setHeader(String name,String value)：设置响应头</li><li>setContentType(String type)：设置响应类型和响应式的编码格式</li><li>setCharacterEncoding(String charset)：设置服务端响应内容的编码格式</li><li>PrintWriter getWriter()：获取字符输出流</li><li>sendRedirect(String targetURI)：页面重定向跳转</li></ul></li><li><p>中文乱码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">res.setCharacterEncoding(&quot;UTF-8&quot;);res.setHeader(&quot;Content-Type&quot;:&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);res.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);&#x2F;&#x2F;推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><ul><li>服务器行为，浏览器只做了一次请求，浏览器地址不变</li><li>转发之间传输的信息不会丢失</li><li>只能转发给统一个web应用下的组件</li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li>客户端行为，浏览器做了两次请求，浏览器地址栏改变</li><li>response没有作用域，两次请求的数据无法共享，信息会丢失</li><li>?key=value传递明文数据，getParameter(key)取数据</li><li>可以重定向到任何资源路径</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><p>实例化</p><ul><li>用户第一次访问servlet时由容器调用Servlet构造器创建具体的对象，也可以在启动时就创建</li><li>只执行一次</li></ul></li><li><p>初始化</p><ul><li><p>初始化阶段，init()方法会被调用</p></li><li><p>只被执行一次</p></li></ul></li><li><p>服务</p><ul><li>客户端发送请求时容器将请求和响应对象转发给servlet，传递给service方法</li><li>根据请求次数执行多次</li></ul></li><li><p>销毁</p><ul><li>Servlet容器停止或重启，销毁Servlet对象，并调用destroy()方法</li><li>执行一次</li></ul></li></ol><h2 id="Servlet特性"><a href="#Servlet特性" class="headerlink" title="Servlet特性"></a>Servlet特性</h2><ol><li><p>线程安全问题</p><p>Tomcat容器可以同时多个线程并发访问同一个Servlet，如果在方法中对成员变量做修改，就会有线程安全的问题</p></li><li><p>保证线程安全</p><ul><li>synchronized：将存在线程安全的问题存放在同步代码块中。效率低不推荐</li><li>实现SingleThreadModel接口，每个线程创建servlet实例，但是效率低已淘汰</li><li>尽可能使用局部变量</li></ul></li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>客户端状态管理，将状态保存在客户端</p><ol><li><p>描述：web服务器在HTTP响应头中附带给浏览器的一小段数据。浏览器在访问该web服务器时，都应在HTTP请求投中将这个Cookie回传给Web服务器</p></li><li><p>创建：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 创建cookie对象Cookie cookie &#x3D; new Cookie(&quot;name&quot;, &quot;value&quot;);&#x2F;&#x2F; 设置路径：访问权限cookie.setPath(&quot;&#x2F;webs&quot;);&#x2F;&#x2F; 生命周期 &gt;0：有效期，单位秒；0：浏览器关闭；-1：内存存储cookie.setMaxAge(-1);&#x2F;&#x2F; 响应resp.addCookie(cookie);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取Cookie</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Cookie[] cookies &#x3D; request.getCookies();for(Cookie cookie:cookies)&#123;System.out.println(cookie.getName()+cookie.getValue());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编码解码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 编码URLEncoder.encode(&quot;中文&quot;,&quot;UTF-8&quot;);&#x2F;&#x2F; 解码URLDecoder.decode(cookie.getName(),&quot;UTF-8&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优缺点：</p><ul><li><p>优点</p><ol><li>可配置到期规则</li><li>简单，键值对</li><li>数据持久性，过期之前一直保存在浏览器上</li></ol></li><li><p>缺点</p><ol><li>大小受限制</li><li>用户可设置浏览器禁用Cookie</li><li>安全风险：有可能被篡改</li></ol></li></ul></li></ol><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ol><li><p>描述：用于记录用户的状态。一段时间内，单个客户端与Web服务器的一连串相关的交互过程</p></li><li><p>原理：</p><ul><li>服务器为每一次会话分配一个Session对象</li><li>同一个浏览器（未关闭）发起的多次请求，同属于一次会话</li><li>首次使用到Session时，服务器会自动创建Session，并创建Cookie存储SessionId发送回客户端</li></ul></li><li><p>Session操作</p><ol><li><p>创建session</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpSession session &#x3D; request.getSession();System.out.println(&quot;ID&quot;+session.getId())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置时效</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">session.setmaxInactiveInterval(seconds)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存数据</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">session.setAttribute(&quot;key&quot;,value);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">session.getAttribute(&quot;key&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>移除数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">session.removeAttribute(&quot;key&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出登录、注销</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">session.invalidate()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>生命周期</p><ul><li>开始：第一次使用到Session的请求产生，创建session</li><li>结束：浏览器关闭/session超时/手动注销</li></ul></li><li><p>浏览器禁用cookie解决方案-URL重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String newURL&#x3D; response.encodeRedirectURL(&quot;&#x2F;要跳转的路径&quot;)response.sendRedirect(newURL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><ol><li><p>描述：全局对象，对应一个Tomcat中的web应用。Web服务器启动时，会为每一个web应用创建一块共享的存储区域。服务器关闭时销毁。</p></li><li><p>获取：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">getServletContext();&#x2F;&#x2F; this&#x2F;request&#x2F;session获取的ServletContext是同一个<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用：</p><ol><li><p>获取项目真实路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servletContext.getRealPath(&quot;&#x2F;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取项目上下文路径（应用程序名称）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servletContext.getContextPath();request.getContextPath();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>全局作用域的容器</p><ul><li><p>存储数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servletContext.setAttribute(&quot;key&quot;,value);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servletContext.getAttribute(&quot;key&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>移除数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servletContext.removeAttribute(&quot;key&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>特点：</p><ul><li>一个应用对应一个Servlet上下文</li><li>生命周期：只要容器不关闭、应用不卸载，servletContext就一直存在</li></ul></li></ol></li></ol><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ol><li><p>描述：处于客户端与服务器目标资源之间的一道过滤技术。</p></li><li><p>作用：先于Servlet处理客户端请求；响应时根据执行流程再次反向执行Filter。解决多个Servlet共同代码冗余代码。</p></li><li><p>实现：</p><ul><li>编写Java类实现Filter接口</li><li>在doFilter方法里设计拦截逻辑</li><li>设置拦截路径</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@WebFilter(&quot;&#x2F;filter&quot;)public class MyFilter implements Filter &#123;    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;        System.out.println(&quot;Request Filter&quot;);        filterChain.doFilter(servletRequest,servletResponse);        System.out.println(&quot;Response Filter&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>web.xml配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.learn.myservlet.learnservlet.MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/目标资源路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>过滤器链</p><ol><li>描述：一个web应用中可以编写多个Filter，一组Filter组合称为Filter链</li><li>优先级：<ul><li>如果为注解，按照泪泉名称的字符串顺序决定执行顺序</li><li>如果为web.xml，按照filter-mapping注册顺序，从上到下</li><li>web.xml配置优先注解</li><li>如果注解和web.xml同时配置，会创建多个过滤器对象，造成多次过滤</li></ul></li></ol></li><li><p>拦截路径</p><ul><li>精确拦截，/test</li><li>后缀拦截，*.jsp</li><li>通配符拦截，/*</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat启动乱码</title>
      <link href="/2019/09/28/wen-ti-ji-lu-tomcat-qi-dong-luan-ma/"/>
      <url>/2019/09/28/wen-ti-ji-lu-tomcat-qi-dong-luan-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat启动乱码"><a href="#Tomcat启动乱码" class="headerlink" title="Tomcat启动乱码"></a>Tomcat启动乱码</h1><p>修改tomcat的conf下的logging.properties中的参数，</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">java.util.logging.ConsoleHandler.encoding &#x3D; GBK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启</p>]]></content>
      
      
      <categories>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet找不到包</title>
      <link href="/2019/09/26/wen-ti-ji-lu-servlet-zhao-bu-dao-bao/"/>
      <url>/2019/09/26/wen-ti-ji-lu-servlet-zhao-bu-dao-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet找不到包"><a href="#Servlet找不到包" class="headerlink" title="Servlet找不到包"></a>Servlet找不到包</h1><p>实现Servlet方法后javac时找不到<code>javax.Servlet</code>，查阅后发现在Tomcat 10版本中<code>Jakarta.servlet</code></p>]]></content>
      
      
      <categories>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础梳理（持续补充）</title>
      <link href="/2019/07/12/java-ji-chu-shu-li/"/>
      <url>/2019/07/12/java-ji-chu-shu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基础梳理（持续补充）"><a href="#JAVA基础梳理（持续补充）" class="headerlink" title="JAVA基础梳理（持续补充）"></a>JAVA基础梳理（持续补充）</h1><h2 id="1-JVM、JRE、JDK"><a href="#1-JVM、JRE、JDK" class="headerlink" title="1. JVM、JRE、JDK"></a>1. JVM、JRE、JDK</h2><ul><li>JVM：虚拟的用于执行bytecode字节码的虚拟计算机</li><li>JRE：JAVA运行环境，包含JAVA虚拟机、库函数、运行JAVA应用程序所必须的文件</li><li>JDK：JAVA工具包，包含JRE，以及增加编译器和调试器等用于程序开发的文件</li></ul><img src="/2019/07/12/java-ji-chu-shu-li/image-1.png" class=""><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h2><ul><li><p>局部变量</p><p>方法内部的变量。生命周期从声明到方法执行结束</p></li><li><p>成员变量</p><p>方法外部、类内部的变量。生命周期伴随对象</p></li><li><p>静态变量</p><p>使用static定义。从属于类，生命周期伴随类的加载到卸载。</p><p>静态字段属于所有对象“共享”的变量，实际上是属于类的变量，无论修改哪个对象的静态变量，效果都是一样的：所有实例的静态变量都被修改了。所以一般访问静态变量用 类名.静态变量</p></li></ul><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h2><ul><li><p>基本数据类型</p><ul><li><p>整数类型（byte 1字节=8位 范围-2^7~2^7-1，short 2字节，int 4字节，long 8字节）</p></li><li><p>浮点类型（float 4字节 范围-3.403E38<del>3.403E38，double 8字节 范围-1.798E308</del>1.798E308）</p></li><li><p>字符型（char 2字节）</p></li><li><p>布尔型（boolean 1位）</p></li></ul></li><li><p>引用数据类型（4字节，存放引用地址）</p><p>class，inerface，array</p></li></ul><h2 id="4-方法"><a href="#4-方法" class="headerlink" title="4. 方法"></a>4. 方法</h2><ul><li><p>静态方法：static修饰的方法属于<code>class</code>而不属于对象。静态方法内部，无法访问<code>this</code>变量，也无法访问对象的成员变量，它只能访问静态变量和其他静态方法。常用于工具类</p></li><li><p>方法重载（override）：方法名相同，参数不同，构成重载</p></li><li><p>方法重写（override）：子类通过重写父类的方法，替换父类的行为</p><ul><li>方法名、形参列表相同</li><li>返回值类型和异常类型，子类小于等于父类</li><li>访问权限，子类大于父类</li></ul></li></ul><h2 id="5-类与对象"><a href="#5-类与对象" class="headerlink" title="5. 类与对象"></a>5. 类与对象</h2><p>类可以看作对象的模板</p><ul><li><p>构造方法（constructor）：用于创建这个类的对象</p><ol><li>通过new关键字调用</li><li>构造器虽然有返回值，但是不能定义返回值类型，不能在构造器内使用return返回某个值</li><li>如果我们没有定义构造器，无参的构造方法由系统自动生成</li><li>方法名与类名保持一致</li><li>构造方法执行的第一行代码总是super();</li></ol></li><li><p>对象转型</p><ul><li><p>向上转型：父类引用指向子类对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Father f &#x3D; new Child();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>强制向下转型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Child c &#x3D; (Child) f;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="6-内存分析"><a href="#6-内存分析" class="headerlink" title="6. 内存分析"></a>6. 内存分析</h2><p>java虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area</p><ul><li><p>栈：</p><ol><li>栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧（用于存储局部变量、操作数、方法出口等）</li><li>JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）</li><li>栈属于线程私有，不能实现线程间的共享</li><li>栈的存储特性是先进后出、后进先出</li><li>栈由系统自动分配，速度快。栈是连续的存储空间</li></ol></li><li><p>堆：</p><ol><li>堆用于存储创建好的对象和数组</li><li>JVM只有一个堆，被所有线程共享</li><li>堆是一个不连续的存储空间，分配灵活，速度慢</li></ol></li><li><p>方法区（静态区）：</p><ol><li>JVM只有一个方法区，被所有线程共享</li><li>方法区实际也是堆，只用于存储类、常量等相关信息</li><li>用于存放唯一或不变的内容（类信息、静态变量、字符串常量等）</li></ol></li></ul><img src="/2019/07/12/java-ji-chu-shu-li/image-2.png" class=""><h2 id="7-继承（extends）"><a href="#7-继承（extends）" class="headerlink" title="7. 继承（extends）"></a>7. 继承（extends）</h2><ul><li>Java只有单继承（接口有多继承）</li><li>子类继承父类，可以得到父类的全部属性和方法（除了父类的构造方法和私有的属性和方法）</li><li>没有extends时，则继承java.lang.Object</li><li>super 直接父类对象的引用，用于访问父类中被子类覆盖的方法或属性</li></ul><h2 id="8-封装"><a href="#8-封装" class="headerlink" title="8. 封装"></a>8. 封装</h2><p>程序设计要求高内聚低耦合</p><ul><li><p>优点：</p><ol><li>提高代码安全性</li><li>提高代码的复用性</li><li>高内聚指类的内部数据操作细节已经完成，不允许外部干涉</li><li>低耦合是仅暴露少量的方法给外部使用，尽量方便外部调用</li></ol></li><li><p>访问权限：</p><ol><li>private 私有权限，只有自己的类能访问</li><li>default 默认权限，只有同一个包的类能访问</li><li>protected 受保护权限，可以被同一个包的类及其他包的子类访问</li><li>public 公开权限，可以被该项目的所有包中的所有类访问</li></ol></li><li><p>JavaBean：</p><ul><li><p>若干<code>private</code>实例字段</p></li><li><p>通过<code>public</code>  get/set方法来读写实例字段</p></li><li><p>枚举一个JavaBean的所有属性，可以使用Java核心库提供的Introspector（注意<code>class</code>属性是从<code>Object</code>继承的<code>getClass()</code>方法带来的。）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">BeanInfo info &#x3D; Introspector.getBeanInfo(类名.class);PropertyDescriptor pd  &#x3D; info.getPropertyDescriptors()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="9-多态（Polymorphic）"><a href="#9-多态（Polymorphic）" class="headerlink" title="9. 多态（Polymorphic）"></a>9. 多态（Polymorphic）</h2><p>同一个方法调用，由于对象不同可能会有不同的行为</p><ul><li>是方法的多态，与属性无关（多态与属性无关）</li><li>多态的三个必要条件：继承，方法重写，父类引用指向子类对象</li><li>父类引用指向子类对象后，用该父类引用调用子类重写的方法</li></ul><h2 id="10-final关键字"><a href="#10-final关键字" class="headerlink" title="10. final关键字"></a>10. final关键字</h2><ul><li>修饰变量：被final修饰的变量不可改变，必须在创建对象时初始化，不能重新赋值</li><li>修饰方法：被final修饰的方法不可被子类重写，但是可以被重载</li><li>修饰类：被final修饰的类不能被继承（Math、String）</li></ul><h2 id="11-数组"><a href="#11-数组" class="headerlink" title="11. 数组"></a>11. 数组</h2><ul><li>长度是确定的。一旦被创建，大小不可改变</li><li>元素是相同数据类型</li><li>数组类型可以使任意数据类型。数组本身是引用类型</li></ul><p>声明：声明的时候没有实例化任何对象，只有在实例化对象时JVM才分配空间。声明时数据没有真正被创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 声明：栈内存Type[] arr_name;Type arr_name[];&#x2F;&#x2F; 声明并实例化。分配空间：堆内存Type[] arr_name &#x3D; new Type[size];Type arr_name[] &#x3D; new Type[size];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-抽象方法抽象类（abstract）"><a href="#12-抽象方法抽象类（abstract）" class="headerlink" title="12. 抽象方法抽象类（abstract）"></a>12. 抽象方法抽象类（abstract）</h2><ul><li><p>抽象方法</p><p>使用abstract修饰的方法，没有方法体只有声明，定义子类具体实现的规范</p></li><li><p>抽象类</p><p>包含抽象方法的类（只能定义成抽象类）。不能实例化，只能用来被继承，使子类更加通用</p></li></ul><h2 id="13-接口（interface）"><a href="#13-接口（interface）" class="headerlink" title="13. 接口（interface）"></a>13. 接口（interface）</h2><p>接口的所有方法都是抽象方法</p><ul><li>访问修饰符只能是public或默认</li><li>可以多继承接口，extends</li><li>接口中的属性只能是常量，public static final 修饰（默认）</li><li>方法 public abstract修饰（默认）</li><li>子类通过implements实现接口规范，并且要实现接口中所有方法（public）</li><li>不能实例化</li></ul><h2 id="14-内部类（Inner-Class）"><a href="#14-内部类（Inner-Class）" class="headerlink" title="14. 内部类（Inner Class）"></a>14. 内部类（Inner Class）</h2><ul><li><p>成员内部类</p><p>  可以使用private、default、protected、public修饰，类文件：外部类$内部类.class</p><ul><li>非静态内部类<ol><li>非静态内部类寄存在一个外部类里，非静态内部类对象一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象</li><li>非静态内部类可以直接访问外部类的成员，但外部类不能直接访问非静态内部类成员</li><li>非静态内部类不能有静态方法。静态属性和静态代码块</li><li>外部类的静态方法。静态代码块不能访问非静态内部类，不能使用非静态内部类定义变量、创建实例</li></ol></li><li>静态内部类<ol><li>静态内部类存在时，不一定存在对应的外部类对象。静态内部类的实例方法不能直接访问外部类的实例方法</li><li>静态内部类看做外部类的一个静态成员。外部类方法中可以通过 静态内部类.成员名 访问静态内部类的静态成员，通过 new 静态内部类（）常见静态内部类的实例</li></ol></li></ul></li><li><p>匿名内部类</p><p>  适用于一次性使用的类</p><p>  没有访问修饰符</p><p>  没有构造方法和类名</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">new 构造器&#x2F;接口() &#123;    &#x2F;&#x2F; 实现必要的抽象方法...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>局部内部类</p></li></ul><h2 id="15-常用类"><a href="#15-常用类" class="headerlink" title="15. 常用类"></a>15. 常用类</h2><ul><li><p>包装类</p><p>Byte、Boolean、Short、Character、Integer、Long、Float、Double</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 基本类型转换为包装类Integer i1 &#x3D; new Integer(100); Integer i2 &#x3D; Integer.valueOf(100);&#x2F;&#x2F; 包装类转换为基本类型int i3 &#x3D; i1.intValue();&#x2F;&#x2F; 字符串转换为IntegerInteger i4 &#x3D; Integer.parseInt(&quot;100&quot;);Integer i5 &#x3D; new Integer(&quot;100&quot;);&#x2F;&#x2F; Integer转换为字符串String s1 &#x3D; i4.toString();&#x2F;&#x2F; int类型最大值Integer.MAX_VALUE;&#x2F;&#x2F; 自动装箱Integer i &#x3D;100;&#x2F;&#x2F; 自动拆箱int j &#x3D; i;&#x2F;&#x2F; 编译通过但是空指针异常Integer i &#x3D; null;int j &#x3D; i;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>String类</p><p>可变字符序列：StringBuilder不安全但效率高，StringBuffer安全但效率低（一般用StringBuilder）</p></li><li><p>Date类</p><p>时间戳：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">long now &#x3D;  System.currentTimeMillis();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>DateFormat类：时间对象和指定格式的字符串相互转化。抽象类，一般需要SimpleDateFormat类实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Dateformat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);String str &#x3D; df.format(new Date(4000000));Date date &#x3D; df.parse(&quot;2020-05-21 13:14:15&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>File类</p><p>java.io.file</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">File f &#x3D; new File(&quot;文件路径&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="16-枚举"><a href="#16-枚举" class="headerlink" title="16. 枚举"></a>16. 枚举</h2><p>enum，本质是类，public static final 修饰</p><h2 id="17-异常"><a href="#17-异常" class="headerlink" title="17. 异常"></a>17. 异常</h2><p>java.lang.throwable，两个子类Error和Exception</p><img src="/2019/07/12/java-ji-chu-shu-li/image-3.png" class=""><ul><li>catch方法。toString()，显示异常的类名和产生异常的原因</li><li>catch方法。getMessage()，只显示产生异常的原因，不显示类名</li><li>catch方法。printStackTrace()，跟踪异常事件发生时的堆栈内容</li><li>finally语句可选，如果有的话，则不管是否发生异常都会执行</li><li>try catch中存在return，执行完finally语句再通过return语句退出</li><li>自定义异常，继承exception类</li></ul><p>Exception<br>│<br>├─ RuntimeException<br>│  │<br>│  ├─ NullPointerException<br>│  │<br>│  ├─ IndexOutOfBoundsException<br>│  │<br>│  ├─ SecurityException<br>│  │<br>│  └─ IllegalArgumentException<br>│     │<br>│     └─ NumberFormatException<br>│<br>├─ IOException<br>│  │<br>│  ├─ UnsupportedCharsetException<br>│  │<br>│  ├─ FileNotFoundException<br>│  │<br>│  └─ SocketException<br>│<br>├─ ParseException<br>│<br>├─ GeneralSecurityException<br>│<br>├─ SQLException<br>│<br>└─ TimeoutException</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA注解与反射</title>
      <link href="/2019/02/07/java-zhu-jie/"/>
      <url>/2019/02/07/java-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA注解与反射"><a href="#JAVA注解与反射" class="headerlink" title="JAVA注解与反射"></a>JAVA注解与反射</h1><h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解 - Annotation"></a>注解 - Annotation</h2><h3 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h3><ul><li>不是程序本身，可以对程序做出解释</li><li>可以被其他程序读取</li></ul><h3 id="2-格式"><a href="#2-格式" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>​    @注解名(参数值|value={“参数值”})</p><h3 id="3-内置注解"><a href="#3-内置注解" class="headerlink" title="3. 内置注解"></a>3. 内置注解</h3><ul><li><p>@Override</p><p>修饰方法。表示一个方法声明打算重写父类方法</p></li><li><p>@Deprecated</p><p>修饰方法属性和类。表示不鼓励程序员使用这样的元素</p></li><li><p>SuppressWarnings</p><p>用来抑制编译时的警告信息</p></li></ul><h3 id="4-元注解"><a href="#4-元注解" class="headerlink" title="4. 元注解"></a>4. 元注解</h3><p>​    负责注解其他注解<br>​    四个标准meta-annocation类型：</p><ul><li><p>@Target</p><p>描述注解的使用范畴</p><p>修饰范围：</p><ul><li>PACKAGE 包</li><li>TYPE 类、接口、枚举、Annocation</li><li>CONSTRUCTOR 类构造器</li><li>FIELD 域</li><li>METHOD 方法</li><li>LOCAL_VARIABLE 局部变量</li><li>PARAMETER 参数</li></ul></li><li><p>@Retention</p><p>表示需要在什么级别保存该注释信息，用于描述注解的生命周期</p><p>取值：</p><ul><li>SOURCE 源文件中有效</li><li>CLASS class文件中有效</li><li>RUNTIME 运行时有效，此时可以被反射机制读取（自定义一般用RUNTIME）</li></ul></li><li><p>@Documented</p></li><li><p>@Inherited</p></li></ul><h3 id="5-自定义注解"><a href="#5-自定义注解" class="headerlink" title="5. 自定义注解"></a>5. 自定义注解</h3><ul><li>@interface自动继承了java.lang.annocation.Annocation接口</li><li>每一个方法实际上是声明了一个配置参数</li><li>方法名称就是参数名称</li><li>返回值类型就是参数的类型（只能是基本类型、Class、String、enum）</li><li>可以通过default来声明参数的默认值</li><li>如果只有一个参数成员，一般参数名为value</li></ul><h3 id="6-反射读取注解"><a href="#6-反射读取注解" class="headerlink" title="6. 反射读取注解"></a>6. 反射读取注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@TestObjectTable(&quot;tb_test_object&quot;)public class TestObject &#123;    @TestObjectField(columnName &#x3D; &quot;id&quot;,type &#x3D; &quot;int&quot;,length &#x3D; 10)    private int id;    @TestObjectField(columnName &#x3D; &quot;name&quot;,type &#x3D; &quot;String&quot;,length &#x3D; 50)    private String name;&#125;@Target(value&#x3D; &#123;ElementType.FIELD&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface TestObjectField &#123;    String columnName();    String type();    int length();&#125;@Target(value&#x3D; &#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface TestObjectTable &#123;    String value();&#125;public static void main(String[] args) &#123;    try&#123;        Class clazz &#x3D; Class.forName(&quot;MyAnnotation.TestObject&quot;);        &#x2F;&#x2F; 获得类的所有有效注解        Annotation[] annotations &#x3D;  clazz.getAnnotations();        for(Annotation a:annotations)&#123;            System.out.println(a);        &#125;        &#x2F;&#x2F; 获得指定注解        System.out.println(clazz.getAnnotation(TestObjectTable.class));        &#x2F;&#x2F; 获得类的属性的注解        Field f &#x3D; clazz.getDeclaredField(&quot;name&quot;);        TestObjectField testObjectField &#x3D;  f.getAnnotation(TestObjectField.class);        System.out.println(testObjectField.columnName());        System.out.println(testObjectField.type());        System.out.println(testObjectField.length());    &#125; catch (Exception e)&#123;        e.printStackTrace();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射-reflection"><a href="#反射-reflection" class="headerlink" title="反射 - reflection"></a>反射 - reflection</h2><p>​    程序在运行时加载使用编译期间完全未知的类。在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用任意一个方法和属性</p><pre class="line-numbers language-none"><code class="language-none">Class c &#x3D; Class.forName(&quot;类名包路径&quot;); &#x2F;&#x2F; java.lang.Class，Reflection的根源<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    类加载完后，在堆内存中生成一个Class类型的对象，包含完整的类的结构的信息</p><ul><li><p>动态语言：程序运行时可以改变程序结构和变量类型。JAVA不是动态语言但是有一定的动态性</p></li><li><p>实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestObject &#123;    public TestObject()&#123;    &#125;    public TestObject(int id,String name)&#123;        this.id &#x3D; id;        this.name &#x3D; name;    &#125;    private int id;    private String name;&#125;public class Demo &#123;    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;        String path &#x3D; &quot;Reflection.TestObject&quot;;        &#x2F;&#x2F; 方法一        Class clazz &#x3D; Class.forName(path);        &#x2F;&#x2F; 方法二        Class clazz2 &#x3D; path.getClass();        System.out.println(clazz);        &#x2F;&#x2F; 一个类只有一个class对象        System.out.println(clazz &#x3D;&#x3D; clazz2); &#x2F;&#x2F; true        System.out.println(clazz.hashCode());        System.out.println(clazz.getName());&#x2F;&#x2F; 获得包名        System.out.println(clazz.getSimpleName());&#x2F;&#x2F; 获得类名        System.out.println(clazz.hashCode());        System.out.println(clazz.getFields().length);&#x2F;&#x2F; 只能获得public        System.out.println(clazz.getDeclaredFields().length);&#x2F;&#x2F; 获得所有字段        System.out.println(clazz.getDeclaredField(&quot;name&quot;));&#x2F;&#x2F; 获得所有字段        System.out.println(clazz.getMethods());&#x2F;&#x2F; 获得public方法        System.out.println(clazz.getDeclaredMethod(&quot;getName&quot;,null));&#x2F;&#x2F; 获得方法,参数类型区分        System.out.println(clazz.getDeclaredMethod(&quot;setName&quot;,String.class));&#x2F;&#x2F; 获得方法,参数类型区分        System.out.println(clazz.getDeclaredConstructor(int.class,String.class));&#x2F;&#x2F; 获得有参构造器    &#125;&#125;public class DynamicReflectionDemo &#123;    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;        String path &#x3D; &quot;Reflection.TestObject&quot;;        Class&lt;TestObject&gt; clazz &#x3D; (Class&lt;TestObject&gt;)Class.forName(path);        &#x2F;&#x2F; 通过动态调用构造方法，构造对象        TestObject test&#x3D; clazz.newInstance(); &#x2F;&#x2F; java bean需要无参构造器        System.out.println(test);        Constructor&lt;TestObject&gt; c &#x3D; clazz.getDeclaredConstructor(int.class,String.class);        TestObject testWithParam &#x3D; c.newInstance(1,&quot;测试&quot;);        System.out.println(testWithParam.getName());&#x2F;&#x2F; 有参构造器创建对象        &#x2F;&#x2F; 通过反射API调用普通方法        Method method &#x3D; clazz.getDeclaredMethod(&quot;setName&quot;,String.class);        method.invoke(testWithParam,&quot;反射调用普通方法测试&quot;);        System.out.println(testWithParam.getName());        &#x2F;&#x2F; 通过反射API操作属性        Field f &#x3D; clazz.getDeclaredField(&quot;name&quot;);        f.setAccessible(true); &#x2F;&#x2F; 标记不需要做安全检察，可以直接访问        f.set(testWithParam,&quot;反射操作属性测试&quot;);        System.out.println(testWithParam.getName());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>setAccessible</p><p>性能问题：设为true取消安全检查，禁止安全检查可以提高反射的运行速度</p></li><li><p>动态编译</p><ul><li><p>通过runtime调用javac，启用新的进程取操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void runTime() throws IOException &#123;    Runtime run &#x3D; Runtime.getRuntime();    Process process &#x3D; run.exec(&quot;java -cp d:&#x2F;myjava HelloWorld&quot;);    InputStream in &#x3D; process.getInputStream();    BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(in));    String info &#x3D; &quot;&quot;;    while ((info &#x3D; reader.readLine())!&#x3D;null)&#123;        System.out.println(info);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>javaCompiler动态编译</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static int compileFile(String sourceFile)&#123;    JavaCompiler compiler &#x3D; ToolProvider.getSystemJavaCompiler();    int result &#x3D; compiler.run(null,null,null,sourceFile);    System.out.println(result &#x3D;&#x3D; 0?&quot;success&quot;:&quot;failed&quot;);    return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"> public void reflectCompile() throws NoSuchMethodException, MalformedURLException, ClassNotFoundException, InvocationTargetException, IllegalAccessException &#123;    URL[] urls &#x3D; new URL[]&#123;new URL(&quot;file:&#x2F;&quot;+ &quot;D:&#x2F;myjava&#x2F;&quot;)&#125;;    URLClassLoader loader &#x3D; new URLClassLoader(urls);    Class c &#x3D; loader.loadClass(&quot;HelloWorld&quot;);    c.getMethod(&quot;main&quot;,String[].class).invoke(null,(Object) new String[]&#123;&quot;aa&quot;,&quot;bb&quot;&#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux shell脚本报错</title>
      <link href="/2019/01/08/shell-jiao-ben-bao-cuo/"/>
      <url>/2019/01/08/shell-jiao-ben-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>shell脚本报错 “syntax error near unexpected token `fi’”</p><p>1.cat -v mysqlmonitor.sh命令查看代码<br>2.linux里面查看后自动在换行符后面带上了^M的标识<br>3.用vim打开文件，在命令行模式下输入:set ff=unix</p>]]></content>
      
      
      <categories>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
